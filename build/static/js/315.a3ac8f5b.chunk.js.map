{"version":3,"file":"static/js/315.a3ac8f5b.chunk.js","mappings":"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","sources":["components/common/flex-box.tsx","components/common/skeleton.tsx","components/common/typography.tsx","hook/use-intersection-observer.ts","utils/formatted-number.ts","pages/my-page/hook/use-fetch-my-bookmark.tsx","pages/my-page/my-page-bookmark/index.tsx","pages/my-page/hook/use-fetch-my-posts.tsx","pages/my-page/my-page-posts/index.tsx","pages/my-page/index.tsx","react-query-key/my-page-keys.ts","../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\ninterface IFlexBox {\r\n  children: React.ReactNode;\r\n  style?: React.CSSProperties;\r\n  $direction?: string;\r\n  $justifyContent?: string;\r\n  $alignItems?: string;\r\n  $wrap?: string;\r\n  $gap?: string;\r\n  $padding?: string;\r\n  $background?: string;\r\n}\r\n\r\nconst Container = styled.div<IFlexBox>`\r\n  display: flex;\r\n  flex-direction: ${({ $direction }) => $direction || 'row'};\r\n  justify-content: ${({ $justifyContent }) => $justifyContent || 'flex-start'};\r\n  align-items: ${({ $alignItems }) => $alignItems || 'stretch'};\r\n  flex-wrap: ${({ $wrap }) => $wrap || 'nowrap'};\r\n  gap: ${({ $gap }) => $gap || '0'};\r\n  padding: ${({ $padding }) => $padding};\r\n  background: ${({ $background }) => $background || 'transparent'};\r\n`;\r\n\r\nconst FlexBox = ({\r\n  children,\r\n  $direction,\r\n  $justifyContent,\r\n  $alignItems,\r\n  $wrap,\r\n  $gap,\r\n  $padding,\r\n  $background,\r\n  style,\r\n}: IFlexBox) => {\r\n  return (\r\n    <Container\r\n      $direction={$direction}\r\n      $justifyContent={$justifyContent}\r\n      $alignItems={$alignItems}\r\n      $wrap={$wrap}\r\n      $gap={$gap}\r\n      $padding={$padding}\r\n      $background={$background}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FlexBox;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\n// 스켈레톤 애니메이션\r\nconst skeletonAnimation = keyframes`\r\n  0% {\r\n    background-position:100% 0%;\r\n  }\r\n  100% {\r\n    background-position:0% 0%;\r\n  }\r\n  `;\r\n\r\ninterface ISkeletonProps {\r\n  width: string;\r\n  height: string;\r\n  $borderradius?: string;\r\n  $margin?: string;\r\n}\r\n\r\nconst SkeletonElement = styled.div<ISkeletonProps>`\r\n  height: ${({ height }) => height};\r\n  width: ${({ width }) => width};\r\n  border-radius: ${({ $borderradius }) => $borderradius};\r\n  margin: ${({ $margin }) => $margin};\r\n  background: linear-gradient(90deg, #1e1e1e 35%, #0a0a0a 50%, #151515 65%);\r\n  /* background-size: 200px 100%; */\r\n  background-size: 300% auto;\r\n  animation: ${skeletonAnimation} 2s infinite linear;\r\n`;\r\n\r\nconst Skeleton = ({\r\n  width,\r\n  height,\r\n  $borderradius,\r\n  $margin,\r\n}: ISkeletonProps) => {\r\n  return (\r\n    <div>\r\n      <SkeletonElement\r\n        width={width}\r\n        height={height}\r\n        $borderradius={$borderradius}\r\n        $margin={$margin}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n","import { CSSProperties, ReactNode, createElement } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype TagVariants = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span';\r\n\r\ninterface ITypographyProps {\r\n  tag: TagVariants;\r\n  children: ReactNode;\r\n  style?: CSSProperties;\r\n}\r\n\r\nconst DynamicTypography = styled(\r\n  ({ tag, children, ...props }: ITypographyProps) =>\r\n    createElement(tag, props, children)\r\n)`\r\n  color: rgb(245, 245, 245);\r\n`;\r\n\r\nconst Typography = ({\r\n  tag = 'p',\r\n  children,\r\n  ...props\r\n}: ITypographyProps & CSSProperties) => (\r\n  <DynamicTypography tag={tag} style={{ ...props }}>\r\n    {children}\r\n  </DynamicTypography>\r\n);\r\n\r\nexport default Typography;\r\n","import { RefObject, useEffect, useState } from 'react';\r\n\r\nfunction useIntersectionObserver(\r\n  elementRef: RefObject<Element>,\r\n  { threshold = 0.1, root = null, rootMargin = '0%' }\r\n) {\r\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\r\n  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {\r\n    setEntry(entry);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const node = elementRef?.current;\r\n    const hasIOSupport = !!window.IntersectionObserver;\r\n\r\n    if (!node || !hasIOSupport) return;\r\n\r\n    const obserParams = { threshold, root, rootMargin };\r\n    const observer = new IntersectionObserver(updateEntry, obserParams);\r\n\r\n    observer.observe(node);\r\n\r\n    return () => observer.disconnect();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [elementRef?.current, root, rootMargin, JSON.stringify(threshold)]);\r\n\r\n  return entry;\r\n}\r\n\r\nexport default useIntersectionObserver;\r\n","export const formattedNumber = (number: number) => {\r\n  if (number >= 10000) {\r\n    return new Intl.NumberFormat('ko-KR').format(number / 10000) + '만';\r\n  } else if (number >= 1000) {\r\n    return new Intl.NumberFormat('ko-KR').format(number / 1000) + '천';\r\n  } else {\r\n    return number;\r\n  }\r\n};\r\n","import { useInfiniteQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { IBookmarkResponse } from 'interface/bookmark';\r\nimport { myPageKey } from 'react-query-key/my-page-keys';\r\n\r\nconst fetchMyBookmark = async (\r\n  pageParam: number\r\n): Promise<IBookmarkResponse> => {\r\n  await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n  const res = await instance.get<IBookmarkResponse>(\r\n    `/api/myPage/bookmarks/?page=${pageParam}`\r\n  );\r\n  return res.data;\r\n};\r\n\r\nconst useFetchMyBookmark = () => {\r\n  const {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  } = useInfiniteQuery({\r\n    queryKey: [myPageKey.myBookmark],\r\n    queryFn: ({ pageParam = 1 }) => fetchMyBookmark(pageParam),\r\n    initialPageParam: 1,\r\n    getNextPageParam: (lastPage) => {\r\n      return lastPage?.posts?.length > 0 &&\r\n        lastPage?.page !== lastPage?.totalPage\r\n        ? lastPage.page + 1\r\n        : undefined;\r\n    },\r\n  });\r\n\r\n  return {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useFetchMyBookmark;\r\n","import { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { CiHeart } from 'react-icons/ci';\r\nimport { IoChatbubbleOutline } from 'react-icons/io5';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport useIntersectionObserver from 'hook/use-intersection-observer';\r\nimport { formattedNumber } from 'utils/formatted-number';\r\nimport useFetchMyBookmark from '../hook/use-fetch-my-bookmark';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport Skeleton from 'components/common/skeleton';\r\nimport Typography from 'components/common/typography';\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 4px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  position: relative;\r\n  &:hover .hover-box {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst HoverBox = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  z-index: 10;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  cursor: pointer;\r\n  opacity: 0;\r\n  transition: opacity 0.3s;\r\n\r\n  .icons {\r\n    font-size: 30px;\r\n    margin-right: 2px;\r\n    @media (max-width: 768px) {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n  .chat-icon {\r\n    font-size: 25px;\r\n    transform: scaleX(-1);\r\n    @media (max-width: 768px) {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n  span {\r\n    @media (max-width: 768px) {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n`;\r\nconst Img = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  aspect-ratio: 1;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  width: 100%;\r\n  max-width: 935px;\r\n  position: absolute;\r\n  bottom: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst SKELETONS = Array(10).fill(0);\r\n\r\nconst MyPageBookMark = () => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  const pageRef = useIntersectionObserver(ref, {});\r\n  const isPageEnd = !!pageRef?.isIntersecting; // 페이지 끝에도달\r\n\r\n  const {\r\n    data: postsResponse,\r\n    isLoading,\r\n    isFetching,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isFetchingNextPage,\r\n  } = useFetchMyBookmark();\r\n\r\n  const fetchNext = useCallback(async () => {\r\n    const res = await fetchNextPage();\r\n\r\n    if (res.isError) {\r\n      console.log(res.error);\r\n    }\r\n  }, [fetchNextPage]);\r\n\r\n  useEffect(() => {\r\n    let timerId: NodeJS.Timeout | undefined;\r\n\r\n    if (isPageEnd && hasNextPage) {\r\n      timerId = setTimeout(() => {\r\n        fetchNext();\r\n      }, 500);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [fetchNext, isPageEnd, hasNextPage]);\r\n\r\n  if (!isLoading && postsResponse?.pages[0]?.posts?.length === 0) {\r\n    return (\r\n      <Typography tag='p' paddingTop='5rem' textAlign='center'>\r\n        아직 저장된 게시물이 없습니다.\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading ? (\r\n        SKELETONS.map((data, index) => (\r\n          <Skeleton width='100%' height='350px' key={index} />\r\n        ))\r\n      ) : (\r\n        <>\r\n          {postsResponse?.pages?.map((data) =>\r\n            data?.posts?.map((data) => (\r\n              <Link to={`/post/${data?.post?._id}`} key={data._id}>\r\n                <Box\r\n                  onMouseEnter={() => setIsHovered(true)}\r\n                  onMouseLeave={() => setIsHovered(false)}\r\n                >\r\n                  <Img src={data?.post?.images[0]} alt='post-img' />\r\n                  {isHovered && (\r\n                    <HoverBox className='hover-box'>\r\n                      <FlexBox\r\n                        style={{ width: '100%', height: '100%' }}\r\n                        $alignItems='center'\r\n                        $justifyContent='center'\r\n                        $gap='4px'\r\n                      >\r\n                        {/* 좋아요 */}\r\n                        <CiHeart className='icons' />{' '}\r\n                        <span>\r\n                          {formattedNumber(data?.post?.postLikeCount || 0)}\r\n                        </span>\r\n                        {/* 댓글 */}\r\n                        <IoChatbubbleOutline className='icons chat-icon' />\r\n                        <span>\r\n                          {formattedNumber(data?.post?.postCommentCount || 0)}\r\n                        </span>\r\n                      </FlexBox>\r\n                    </HoverBox>\r\n                  )}\r\n                </Box>\r\n              </Link>\r\n            ))\r\n          )}\r\n        </>\r\n      )}\r\n      {(isFetching || isFetchingNextPage) && (\r\n        <Spinner>\r\n          <img src='/spinner.svg' alt='loading' className='spinner' />\r\n        </Spinner>\r\n      )}\r\n\r\n      <div\r\n        ref={ref}\r\n        style={{\r\n          height: '40px',\r\n          width: '100%',\r\n          marginBottom: '40px',\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MyPageBookMark;\r\n","import { useInfiniteQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { IPostsResponse } from 'interface/posts';\r\nimport { useEffect } from 'react';\r\nimport { myPageKey } from 'react-query-key/my-page-keys';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst fetchMyPosts = async (pageParam: number): Promise<IPostsResponse> => {\r\n  await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n  const res = await instance.get<IPostsResponse>(\r\n    `/api/myPage/?page=${pageParam}`\r\n  );\r\n\r\n  return res.data;\r\n};\r\n\r\nconst useFetchMyPosts = () => {\r\n  const {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  } = useInfiniteQuery({\r\n    queryKey: [myPageKey.myPosts],\r\n    queryFn: ({ pageParam = 1 }) => fetchMyPosts(pageParam),\r\n    initialPageParam: 1,\r\n    getNextPageParam: (lastPage) => {\r\n      return lastPage?.posts?.length > 0 && lastPage.page !== lastPage.totalPage\r\n        ? lastPage.page + 1\r\n        : undefined;\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error('게시글을 불러오는데 실패했습니다.');\r\n    }\r\n  }, [error]);\r\n\r\n  return {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useFetchMyPosts;\r\n","import { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { CiHeart } from 'react-icons/ci';\r\nimport { IoChatbubbleOutline } from 'react-icons/io5';\r\nimport styled from 'styled-components';\r\n\r\nimport useIntersectionObserver from 'hook/use-intersection-observer';\r\nimport { formattedNumber } from 'utils/formatted-number';\r\nimport useFetchMyPosts from '../hook/use-fetch-my-posts';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport Skeleton from 'components/common/skeleton';\r\nimport Typography from 'components/common/typography';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 4px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  position: relative;\r\n  &:hover .hover-box {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst HoverBox = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  z-index: 10;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  cursor: pointer;\r\n  opacity: 0;\r\n  transition: opacity 0.3s;\r\n\r\n  .icons {\r\n    font-size: 30px;\r\n    margin-right: 2px;\r\n    @media (max-width: 768px) {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n  .chat-icon {\r\n    font-size: 25px;\r\n    transform: scaleX(-1);\r\n    @media (max-width: 768px) {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n  span {\r\n    @media (max-width: 768px) {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n`;\r\nconst Img = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  aspect-ratio: 1;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  width: 100%;\r\n  max-width: 935px;\r\n  position: absolute;\r\n  bottom: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst SKELETONS = Array(10).fill(0);\r\n\r\nconst MyPagePosts = () => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [postId, setPostId] = useState('');\r\n\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  const pageRef = useIntersectionObserver(ref, {});\r\n  const isPageEnd = !!pageRef?.isIntersecting; // 페이지 끝에도달\r\n\r\n  const {\r\n    data: postsResponse,\r\n    isLoading,\r\n    isFetching,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isFetchingNextPage,\r\n  } = useFetchMyPosts();\r\n\r\n  const fetchNext = useCallback(async () => {\r\n    const res = await fetchNextPage();\r\n\r\n    if (res.isError) {\r\n      console.log(res.error);\r\n    }\r\n  }, [fetchNextPage]);\r\n\r\n  useEffect(() => {\r\n    let timerId: NodeJS.Timeout | undefined;\r\n\r\n    if (isPageEnd && hasNextPage) {\r\n      timerId = setTimeout(() => {\r\n        fetchNext();\r\n      }, 500);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [fetchNext, isPageEnd, hasNextPage]);\r\n\r\n  if (\r\n    !isLoading &&\r\n    postsResponse &&\r\n    postsResponse?.pages[0]?.posts?.length === 0\r\n  ) {\r\n    return (\r\n      <Typography tag='p' paddingTop='5rem' textAlign='center'>\r\n        아직 작성한 게시물이 없습니다.\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading ? (\r\n        SKELETONS.map((data, index) => (\r\n          <Skeleton width='100%' height='350px' key={index} />\r\n        ))\r\n      ) : (\r\n        <>\r\n          {postsResponse?.pages?.map((data) =>\r\n            data?.posts?.map((post) => (\r\n              <Link to={`/post/${post?._id}`} key={post._id}>\r\n                <Box\r\n                  onMouseEnter={() => setIsHovered(true)}\r\n                  onMouseLeave={() => setIsHovered(false)}\r\n                >\r\n                  <Img src={post?.images?.[0]} alt='post-img' />\r\n                  {isHovered && (\r\n                    <HoverBox className='hover-box'>\r\n                      <FlexBox\r\n                        style={{ width: '100%', height: '100%' }}\r\n                        $alignItems='center'\r\n                        $justifyContent='center'\r\n                        $gap='4px'\r\n                      >\r\n                        {/* 좋아요 */}\r\n                        <CiHeart className='icons' />{' '}\r\n                        <span>{formattedNumber(post?.postLikeCount || 0)}</span>\r\n                        {/* 댓글 */}\r\n                        <IoChatbubbleOutline className='icons chat-icon' />\r\n                        <span>\r\n                          {formattedNumber(post?.postCommentCount || 0)}\r\n                        </span>\r\n                      </FlexBox>\r\n                    </HoverBox>\r\n                  )}\r\n                </Box>\r\n              </Link>\r\n            ))\r\n          )}\r\n        </>\r\n      )}\r\n      {(isFetching || isFetchingNextPage) && (\r\n        <Spinner>\r\n          <img src='/spinner.svg' alt='loading' className='spinner' />\r\n        </Spinner>\r\n      )}\r\n\r\n      <div\r\n        ref={ref}\r\n        style={{\r\n          height: '40px',\r\n          width: '100%',\r\n          marginBottom: '40px',\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MyPagePosts;\r\n","import { useUser } from 'hook/auth/use-user';\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { CiBookmark, CiViewList } from 'react-icons/ci';\r\nimport { IoIosArrowBack } from 'react-icons/io';\r\nimport { Link, useNavigate, useSearchParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from 'components/common/button';\r\nimport Skeleton from 'components/common/skeleton';\r\nimport MyPageBookMark from './my-page-bookmark';\r\nimport MyPagePosts from './my-page-posts';\r\n\r\nconst Container = styled.div`\r\n  min-height: 100vh;\r\n  background: black;\r\n  overflow: hidden;\r\n  color: rgb(245, 245, 245);\r\n  padding: 2rem 0;\r\n  @media (max-width: 768px) {\r\n    padding-top: 5rem;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  max-width: 935px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst BackButton = styled.div`\r\n  position: absolute;\r\n  top: 2rem;\r\n  left: 1rem;\r\n  font-size: 30px;\r\n  transition: transform 0.3s ease-in-out;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    top: -4rem;\r\n  }\r\n`;\r\n\r\nconst User = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst UserImage = styled.img`\r\n  width: 120px;\r\n  height: 120px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  flex-shrink: 0;\r\n  margin-right: 10px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Nickname = styled.h2`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Introduction = styled.div`\r\n  max-width: 500px;\r\n  text-align: left;\r\n  margin: 0.5rem 0rem 1rem 4px;\r\n  font-size: 14px;\r\n  white-space: pre;\r\n\r\n  button {\r\n    color: rgb(245, 245, 245);\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst ProfileEdit = styled(Button)`\r\n  width: inherit;\r\n  padding: 12px 16px;\r\n  background-color: rgb(54, 54, 54);\r\n  border-radius: 12px;\r\n  font-size: 14px;\r\n\r\n  &:hover {\r\n    background-color: rgb(35, 35, 35);\r\n  }\r\n`;\r\n\r\nconst Tabs = styled.ul`\r\n  position: relative;\r\n  margin-top: 2rem;\r\n  border-top: 1px solid rgb(38, 38, 38);\r\n  display: flex;\r\n  justify-content: space-around;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Tab = styled.li<{ $clicked: string }>`\r\n  gap: 5px;\r\n  font-size: 14px;\r\n  border-top: ${({ $clicked }) =>\r\n    $clicked ? ' 1px solid rgb(245, 245, 245)' : ''};\r\n  color: ${({ $clicked }) =>\r\n    $clicked ? 'rgb(245, 245, 245)' : 'rgb(168, 168, 168)'};\r\n  cursor: pointer;\r\n  height: 52px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: rgb(245, 245, 245);\r\n  }\r\n`;\r\n\r\nconst MAX_CHARS = 100;\r\n\r\nconst MyPage = () => {\r\n  const tab1Ref = useRef<HTMLLIElement>(null);\r\n  const tab2Ref = useRef<HTMLLIElement>(null);\r\n\r\n  const [showFullText, setShowFullText] = useState(false);\r\n  const [activeTab, setActiveTab] = useState(0);\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const query = searchParams.get('currentTab') || '게시물';\r\n\r\n  const { user, isLoading: userLoading } = useUser();\r\n\r\n  const onChangeCurrentTap = (e: any, tabName: string) => {\r\n    const activeNumber = e.currentTarget.offsetLeft;\r\n    setActiveTab(activeNumber);\r\n\r\n    setSearchParams({\r\n      currentTab: tabName,\r\n    });\r\n  };\r\n\r\n  const handleResize = useCallback(() => {\r\n    if (tab1Ref.current && tab2Ref.current) {\r\n      if (query === '게시물') {\r\n        setActiveTab(tab1Ref.current.offsetLeft);\r\n      } else if (query === '북마크') {\r\n        setActiveTab(tab2Ref.current.offsetLeft);\r\n      }\r\n    }\r\n  }, [tab1Ref, tab2Ref, query]);\r\n\r\n  useEffect(() => {\r\n    if (tab1Ref.current && tab2Ref.current) {\r\n      if (query === '게시물') {\r\n        setActiveTab(tab1Ref.current.offsetLeft);\r\n      } else if (query === '북마크') {\r\n        setActiveTab(tab2Ref.current.offsetLeft);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [tab1Ref, tab2Ref, query, activeTab, handleResize]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <BackButton onClick={() => navigate('/')}>\r\n          <IoIosArrowBack />\r\n        </BackButton>\r\n        <User>\r\n          {userLoading ? (\r\n            <>\r\n              <Skeleton width='120px' height='120px' $borderradius='50%' />\r\n              <Skeleton width='80px' height='20px' $margin='10px 0 10px 0 ' />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <UserImage src={user?.avatar} alt='' />\r\n\r\n              <Nickname>{user?.nickname}</Nickname>\r\n\r\n              <Introduction>\r\n                {showFullText ||\r\n                  (user?.introduction &&\r\n                    (user.introduction.length <= MAX_CHARS ? (\r\n                      user.introduction\r\n                    ) : (\r\n                      <>\r\n                        {user.introduction.slice(0, MAX_CHARS)}...\r\n                        <button onClick={() => setShowFullText(true)}>\r\n                          더보기\r\n                        </button>\r\n                      </>\r\n                    )))}\r\n              </Introduction>\r\n              <Link to={`/myPage/edit/${user?._id}`}>\r\n                <ProfileEdit type='button'>프로필 수정</ProfileEdit>\r\n              </Link>\r\n            </>\r\n          )}\r\n        </User>\r\n\r\n        <Tabs>\r\n          <Tab\r\n            ref={tab1Ref}\r\n            onClick={(e) => onChangeCurrentTap(e, '게시물')}\r\n            $clicked={query && query === '게시물' ? 'true' : ''}\r\n          >\r\n            <CiViewList />\r\n            게시물\r\n          </Tab>\r\n          <Tab\r\n            ref={tab2Ref}\r\n            onClick={(e) => onChangeCurrentTap(e, '북마크')}\r\n            $clicked={query && query === '북마크' ? 'true' : ''}\r\n          >\r\n            <CiBookmark /> 북마크\r\n          </Tab>\r\n        </Tabs>\r\n\r\n        {query === '게시물' && <MyPagePosts />}\r\n\r\n        {query === '북마크' && <MyPageBookMark />}\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MyPage;\r\n","export const myPageKey = {\r\n  myPosts: 'myPosts',\r\n  myBookmark: 'myBookmark',\r\n};\r\n","import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseInfiniteQueryResult,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n} from './infiniteQueryOptions'\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): DefinedUseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery(\n  options: UseInfiniteQueryOptions,\n  queryClient?: QueryClient,\n) {\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  )\n}\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","_ref","$direction","_ref2","$justifyContent","_ref3","$alignItems","_ref4","$wrap","_ref5","$gap","_ref6","$padding","_ref7","$background","_ref8","children","style","_jsx","skeletonAnimation","keyframes","SkeletonElement","_templateObject2","height","width","$borderradius","$margin","DynamicTypography","tag","props","createElement","elementRef","threshold","root","rootMargin","entry","setEntry","useState","updateEntry","useEffect","node","current","hasIOSupport","window","IntersectionObserver","observer","observe","disconnect","JSON","stringify","formattedNumber","number","Intl","NumberFormat","format","useFetchMyBookmark","fetchNextPage","isFetching","isFetchingNextPage","hasNextPage","isLoading","data","error","useInfiniteQuery","queryKey","myPageKey","myBookmark","queryFn","pageParam","async","Promise","resolve","setTimeout","instance","get","concat","fetchMyBookmark","initialPageParam","getNextPageParam","lastPage","_lastPage$posts","posts","length","page","totalPage","undefined","Box","HoverBox","_templateObject3","Img","img","_templateObject4","Spinner","_templateObject5","SKELETONS","Array","fill","MyPageBookMark","_postsResponse$pages$","_postsResponse$pages$2","_postsResponse$pages","isHovered","setIsHovered","ref","useRef","pageRef","useIntersectionObserver","isPageEnd","isIntersecting","postsResponse","fetchNext","useCallback","res","isError","console","log","timerId","clearTimeout","pages","_jsxs","map","index","Skeleton","_Fragment","_data$posts","_data$post","_data$post2","_data$post3","_data$post4","Link","to","post","_id","onMouseEnter","onMouseLeave","src","images","alt","className","FlexBox","CiHeart","postLikeCount","IoChatbubbleOutline","postCommentCount","marginBottom","Typography","paddingTop","textAlign","useFetchMyPosts","myPosts","fetchMyPosts","toast","MyPagePosts","postId","setPostId","_post$images","Wrapper","BackButton","User","UserImage","Nickname","h2","_templateObject6","Introduction","_templateObject7","ProfileEdit","Button","_templateObject8","Tabs","ul","_templateObject9","Tab","li","_templateObject10","$clicked","MyPage","tab1Ref","tab2Ref","showFullText","setShowFullText","activeTab","setActiveTab","searchParams","setSearchParams","useSearchParams","navigate","useNavigate","query","user","userLoading","useUser","onChangeCurrentTap","e","tabName","activeNumber","currentTarget","offsetLeft","currentTab","handleResize","addEventListener","removeEventListener","onClick","IoIosArrowBack","avatar","nickname","introduction","slice","type","CiViewList","CiBookmark","InfiniteQueryObserver","QueryObserver","constructor","client","options","super","bindMethods","this","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","fetch","meta","fetchMore","direction","createResult","_state$fetchMeta","_state$fetchMeta2","state","result","isRefetching","fetchMeta","isFetchingPreviousPage","hasPreviousPage","queryClient","useBaseQuery"],"sourceRoot":""}