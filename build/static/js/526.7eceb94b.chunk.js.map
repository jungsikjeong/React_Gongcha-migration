{"version":3,"file":"static/js/526.7eceb94b.chunk.js","mappings":"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","sources":["atom/comment-atoms.tsx","components/comments/comment-form/hook/use-post-comment.tsx","components/comments/comment-form/hook/use-post-reply-comment.tsx","components/comments/comment-form/index.tsx","hook/comments/use-delete-comment.tsx","hook/comments/use-post-like-comment.tsx","hook/comments-reply/use-fetch-comment-reply-list.tsx","hook/comments-reply/use-delete-comment-reply.tsx","hook/comments-reply/use-post-like-comment-reply.tsx","components/comments/comment-reply/comment-reply-item.tsx","components/comments/comment-reply/comment-reply-list.tsx","components/comments/comment-reply/index.tsx","components/comments/comment-list/index.tsx","components/comments/comment-skeleton/index.tsx","components/common/flex-box.tsx","components/common/modal/confirm-modal.tsx","components/common/post-header.tsx","components/common/skeleton/skeleton.tsx","components/common/typography.tsx","hook/comments/use-fetch-comment-list.tsx","pages/post-detail/hook/use-fetch-post-detail.tsx","react-query-key/comment.keys.ts","react-query-key/post.keys.ts"],"sourcesContent":["import { atom } from 'recoil';\r\n\r\ntype ReplyCommentUserType = {\r\n  userId: string;\r\n  commentId: string;\r\n  nickName: string;\r\n};\r\n\r\n// 댓글 아이콘 눌렀을 때  댓글 form에 포커스 주기위한 recoil\r\nexport const commentFormStatus = atom<boolean>({\r\n  key: 'commentFormStatus',\r\n  default: false,\r\n});\r\n// 댓글에 답글 달때 댓글 form에 포커스 주기위한 recoil\r\nexport const replyCommentStatus = atom<boolean>({\r\n  key: 'replyCommentStatus',\r\n  default: false,\r\n});\r\n\r\n// 댓글에 답글 달때 댓글 form에 답글 다는 사람 닉네임 얹기위한 recoil\r\nexport const replyCommentUserStatus = atom<ReplyCommentUserType>({\r\n  key: 'replyCommentUserStatus',\r\n  default: {\r\n    userId: '',\r\n    commentId: '',\r\n    nickName: '',\r\n  },\r\n});\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\nimport { postDetailKey } from 'react-query-key/post.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IPostComment {\r\n  contents: string;\r\n  postId: string;\r\n}\r\n\r\ninterface ICustomResponse<T, U> {\r\n  data: T;\r\n  msg?: U;\r\n}\r\nconst postComment = async ({ contents, postId }: IPostComment) => {\r\n  const res: ICustomResponse<string, any> = await instance.post(\r\n    '/api/comment',\r\n    {\r\n      contents,\r\n      postId,\r\n    }\r\n  );\r\n\r\n  if (res.msg === '리프레시 토큰 만료됨') {\r\n    toast.error('로그인 기한이 만료되었습니다. 다시 로그인 해주세요!');\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1200);\r\n  }\r\n  return res.data;\r\n};\r\n\r\nconst usePostComment = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postComment,\r\n    mutationKey: ['commentKey'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [commentKey.comment],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postDetailKey.post],\r\n        refetchType: 'all',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('댓글 작성 중 오류가 발생했습니다. 다시 시도해주세요');\r\n      if (error?.response?.status === 401) {\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 1200);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostComment;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IPostComment {\r\n  contents: string;\r\n  commentId: string;\r\n  postId: string;\r\n}\r\n\r\nconst postReplyComment = async ({\r\n  contents,\r\n  postId,\r\n  commentId,\r\n}: IPostComment) => {\r\n  const res: any = await instance.post(`/api/reply/comment/${commentId}`, {\r\n    contents,\r\n    postId,\r\n  });\r\n\r\n  if (res.msg === '리프레시 토큰 만료됨') {\r\n    toast.error('로그인 기한이 만료되었습니다. 다시 로그인 해주세요!');\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1200);\r\n  }\r\n\r\n  return res.data;\r\n};\r\n\r\nconst usePostReplyComment = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postReplyComment,\r\n    mutationKey: ['comment-reply-post'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [commentKey.commentReply],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.refetchQueries({ queryKey: [commentKey.comment] });\r\n    },\r\n\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('댓글 작성 중 오류가 발생했습니다. 다시 시도해주세요');\r\n      if (error?.response?.status === 401) {\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 1200);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostReplyComment;\r\n","import { useUser } from 'hook/auth/use-user';\r\nimport { PostsDataType } from 'interface/posts';\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  commentFormStatus,\r\n  replyCommentStatus,\r\n  replyCommentUserStatus,\r\n} from 'atom/comment-atoms';\r\nimport usePostComment from './hook/use-post-comment';\r\nimport usePostReplyComment from './hook/use-post-reply-comment';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\n\r\nconst Container = styled.div`\r\n  margin-top: 1.5rem;\r\n  border-top: 1px solid rgb(38, 38, 38);\r\n  padding: 0px 16px;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-height: 50px;\r\n  padding: 0.875rem 0.1rem;\r\n\r\n  .spinner {\r\n    width: 25px;\r\n    height: 25px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    padding: 0 1rem;\r\n    padding-top: 0.875rem;\r\n  }\r\n`;\r\n\r\nconst Textarea = styled.textarea<{ $iscontents: string }>`\r\n  width: 100%;\r\n  height: 100%;\r\n  resize: none;\r\n  background-color: transparent;\r\n  outline: none;\r\n  border: none;\r\n  color: rgb(245, 245, 245);\r\n  margin-top: ${({ $iscontents }) => ($iscontents ? '0px' : '20px')};\r\n\r\n  &::placeholder {\r\n    color: rgb(168, 168, 168);\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nconst PostBtn = styled.button<{ value: string }>`\r\n  visibility: ${({ value }) => (value ? 'visible' : 'hidden')};\r\n  opacity: ${({ value }) => (value ? '1' : '0')};\r\n  transition: all 0.1s ease;\r\n  flex-shrink: 0;\r\n  font-size: 14px;\r\n  color: rgb(0, 149, 246);\r\n  font-weight: 600;\r\n  padding-right: 0.5rem;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  flex-shrink: 0;\r\n  margin-right: 10px;\r\n`;\r\n\r\ninterface ICommentFormProps {\r\n  post: PostsDataType | undefined;\r\n}\r\n\r\nconst CommentForm = ({ post }: ICommentFormProps) => {\r\n  const { user } = useUser();\r\n\r\n  const [contents, setContents] = useState('');\r\n  const { mutate, isPending } = usePostComment();\r\n  const { mutate: replyCommentMutate, isPending: replyCommentIsPending } =\r\n    usePostReplyComment();\r\n\r\n  const [isReplyCommentStatus, setIsReplyCommentStatus] =\r\n    useRecoilState(replyCommentStatus);\r\n  const [replyCommentUser, setReplyCommentUser] = useRecoilState(\r\n    replyCommentUserStatus\r\n  );\r\n  const [isCommentFormFocus, setIsCommentFormFocus] =\r\n    useRecoilState(commentFormStatus);\r\n\r\n  const formRef = useRef<HTMLTextAreaElement | null>(null);\r\n\r\n  const submitComment = useCallback(async () => {\r\n    if (post?._id) {\r\n      // 대댓글작성\r\n      if (replyCommentUser.commentId) {\r\n        const newContents = contents.replace(\r\n          `@${replyCommentUser.nickName}`,\r\n          ''\r\n        );\r\n\r\n        replyCommentMutate({\r\n          contents: newContents,\r\n          postId: post._id,\r\n          commentId: replyCommentUser.commentId,\r\n        });\r\n        setReplyCommentUser({\r\n          userId: '',\r\n          commentId: '',\r\n          nickName: '',\r\n        });\r\n        setContents('');\r\n      } else {\r\n        // 일반 댓글 작성\r\n        mutate({ contents, postId: post._id });\r\n        setContents('');\r\n      }\r\n    }\r\n  }, [post?._id, replyCommentUser, contents]);\r\n\r\n  const onSubmit: React.FormEventHandler<HTMLFormElement> = async (e) => {\r\n    e.preventDefault();\r\n    await submitComment();\r\n  };\r\n\r\n  // 답글 달기 버튼 눌렀을 때 혹은\r\n  // 댓글 이모티콘 눌렀을 때 댓글 form에 focus줌\r\n  useEffect(() => {\r\n    if (isReplyCommentStatus && formRef.current) {\r\n      formRef.current.focus();\r\n      setContents(`@${replyCommentUser.nickName} `);\r\n    } else if (isCommentFormFocus && formRef.current) {\r\n      formRef.current.focus();\r\n    }\r\n  }, [isReplyCommentStatus, isCommentFormFocus]);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (formRef.current && !formRef.current.contains(event.target as Node)) {\r\n        // Textarea 이외의 요소를 클릭한 경우\r\n        setIsReplyCommentStatus(false);\r\n        setIsCommentFormFocus(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [formRef, setIsReplyCommentStatus, submitComment]);\r\n  return (\r\n    <Container>\r\n      {user ? (\r\n        <Form onSubmit={onSubmit}>\r\n          <Image src={user?.avatar} alt='' />\r\n          {isPending || replyCommentIsPending ? (\r\n            <FlexBox $justifyContent='center' style={{ width: '100%' }}>\r\n              <img\r\n                src='/spinner.svg'\r\n                alt='spinner'\r\n                className='spinner'\r\n                style={{ zIndex: '999' }}\r\n              />\r\n            </FlexBox>\r\n          ) : (\r\n            <>\r\n              <Textarea\r\n                placeholder={`${user?.nickname}님으로 댓글 달기...`}\r\n                onChange={(e) => setContents(e.target.value)}\r\n                onKeyDown={async (e) => {\r\n                  if (e.key === 'Enter') {\r\n                    e.preventDefault();\r\n                    await submitComment();\r\n                  }\r\n                }}\r\n                value={contents}\r\n                ref={formRef}\r\n                $iscontents={contents ? 'true' : ''}\r\n              />\r\n\r\n              <PostBtn value={contents?.length !== 0 ? 'true' : ''}>\r\n                게시\r\n              </PostBtn>\r\n            </>\r\n          )}\r\n        </Form>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CommentForm;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\nimport { postDetailKey } from 'react-query-key/post.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IDeleteCommentProps {\r\n  commentId: string;\r\n  postId: string;\r\n}\r\n\r\nconst deleteComment = async ({ commentId, postId }: IDeleteCommentProps) => {\r\n  const res = await instance.delete(\r\n    `/api/comment/${commentId}?postId=${postId}`\r\n  );\r\n  return res.data;\r\n};\r\n\r\nconst useDeleteComment = (postId: string) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteComment,\r\n    mutationKey: ['comment-delete'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [commentKey.comment, postId],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postDetailKey.post],\r\n        refetchType: 'all',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('댓글 삭제중 에러가 발생했습니다. 다시 시도해주세요');\r\n    },\r\n  });\r\n};\r\n\r\nexport default useDeleteComment;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { IComment } from 'interface/comment';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IPostLikeCommentsProps {\r\n  commentId: string;\r\n  postId: string;\r\n}\r\nconst postLikeComment = async ({\r\n  commentId,\r\n  postId,\r\n}: IPostLikeCommentsProps) => {\r\n  const res = await instance.put<IComment[]>(\r\n    `/api/comment/like/${commentId}?postId=${postId}`\r\n  );\r\n\r\n  return res.data;\r\n};\r\n\r\n// 댓글 좋아요 뮤테이션\r\nconst usePostLikeComment = (postId: string) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postLikeComment,\r\n    mutationKey: ['comment-like'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [commentKey.comment, postId],\r\n        refetchType: 'all',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('에러가 발생했습니다. 다시 시도해주세요');\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostLikeComment;\r\n","import { useInfiniteQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { ICommentReplyResponse } from 'interface/comment';\r\nimport { useEffect } from 'react';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst fetchCommentReplyList = async (\r\n  commentId: string,\r\n  pageParam: number\r\n): Promise<ICommentReplyResponse> => {\r\n  const res = await instance.get<ICommentReplyResponse>(\r\n    `/api/reply/comment/${commentId}?page=${pageParam}`,\r\n    {\r\n      params: {\r\n        limit: 3,\r\n        page: pageParam,\r\n      },\r\n    }\r\n  );\r\n\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(res.data);\r\n    }, 500);\r\n  });\r\n};\r\n\r\nconst useFetchCommentReplyList = (commentId: string) => {\r\n  const {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  } = useInfiniteQuery({\r\n    queryKey: [commentKey.commentReply, commentId],\r\n    queryFn: ({ pageParam = 1 }) => fetchCommentReplyList(commentId, pageParam),\r\n    initialPageParam: 1,\r\n    getNextPageParam: (lastPage) => {\r\n      return lastPage.commentReply?.length > 0 &&\r\n        lastPage.page !== lastPage.totalPage\r\n        ? lastPage.page + 1\r\n        : undefined;\r\n    },\r\n    refetchOnWindowFocus: false,\r\n    staleTime: Infinity,\r\n    select: (data) => ({\r\n      pages: [...data.pages].reverse(),\r\n      pageParams: [...data.pageParams].reverse(),\r\n    }),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      console.log(error);\r\n      toast.error('대댓글을 불러오는데 실패했습니다.');\r\n    }\r\n  }, [error]);\r\n\r\n  return {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useFetchCommentReplyList;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IDeleteCommentProps {\r\n  commentReplyId: string;\r\n  parentCommentId: string;\r\n}\r\n\r\nconst deleteCommentReply = async ({\r\n  commentReplyId,\r\n  parentCommentId,\r\n}: IDeleteCommentProps) => {\r\n  const res = await instance.delete(\r\n    `/api/reply/${commentReplyId}?parentCommentId=${parentCommentId}`\r\n  );\r\n\r\n  return res.data;\r\n};\r\n\r\nconst useDeleteCommentReply = (commentId: string) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deleteCommentReply,\r\n    mutationKey: ['comment-reply-delete'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [commentKey.commentReply, commentId],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.refetchQueries({ queryKey: [commentKey.comment] });\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      if (error?.response?.data?.msg) {\r\n        toast.error(error?.response?.data?.msg);\r\n      } else {\r\n        toast.error('댓글 삭제중 에러가 발생했습니다. 다시 시도해주세요');\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default useDeleteCommentReply;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { IComment } from 'interface/comment';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IPostLikeCommentsProps {\r\n  commentReplyId: string;\r\n  parentCommentId: string;\r\n  postId: string;\r\n}\r\nconst postLikeCommentReply = async ({\r\n  commentReplyId,\r\n  parentCommentId,\r\n  postId,\r\n}: IPostLikeCommentsProps) => {\r\n  const res = await instance.put<IComment[]>(\r\n    `/api/reply/like/${commentReplyId}?parentCommentId=${parentCommentId}`,\r\n    {\r\n      postId,\r\n    }\r\n  );\r\n\r\n  return res.data;\r\n};\r\n\r\n// 대댓글 좋아요 뮤테이션\r\nconst usePostLikeCommentReply = (commentId: string) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postLikeCommentReply,\r\n    mutationKey: ['comment-reply-like'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [commentKey.commentReply, commentId],\r\n        refetchType: 'all',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('에러가 발생했습니다. 다시 시도해주세요');\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostLikeCommentReply;\r\n","import { replyCommentStatus, replyCommentUserStatus } from 'atom/comment-atoms';\r\nimport { useUser } from 'hook/auth/use-user';\r\nimport { CommentReplyTypes } from 'interface/comment';\r\nimport { useCallback, useState } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport { useSetRecoilState } from 'recoil';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport ConfirmModal from 'components/common/modal/confirm-modal';\r\nimport useDeleteCommentReply from 'hook/comments-reply/use-delete-comment-reply';\r\nimport usePostLikeCommentReply from 'hook/comments-reply/use-post-like-comment-reply';\r\nimport { FcLike } from 'react-icons/fc';\r\nimport { SlHeart } from 'react-icons/sl';\r\n\r\nconst CommentsItem = styled.li<{ $ispathname: boolean }>`\r\n  margin-top: 1rem;\r\n  margin-right: -2px;\r\n  width: 100%;\r\n  height: 100%;\r\n  max-width: ${({ $ispathname }) => ($ispathname ? '500px' : '335px')};\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  color: rgb(245, 245, 245);\r\n`;\r\n\r\nconst Box = styled.div``;\r\n\r\nconst UserImage = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  flex-shrink: 0;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Nickname = styled.span`\r\n  font-weight: bold;\r\n  margin-right: 4px;\r\n  flex-shrink: 0;\r\n`;\r\n\r\nconst TaggedUser = styled.span`\r\n  margin-right: 4px;\r\n  flex-shrink: 0;\r\n`;\r\n\r\nconst Contents = styled.span``;\r\n\r\nconst Actions = styled.div`\r\n  padding-top: 8px;\r\n  font-size: 12px;\r\n  color: rgb(168, 168, 168);\r\n\r\n  span {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst LikeBtn = styled.div`\r\n  cursor: pointer;\r\n  margin-top: 5px;\r\n  margin-left: auto;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\ninterface ICommentReplyItemProps {\r\n  commentReplyItem: CommentReplyTypes;\r\n}\r\nconst CommentReplyItem = ({ commentReplyItem }: ICommentReplyItemProps) => {\r\n  const params = useParams();\r\n  const { user } = useUser();\r\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\r\n\r\n  const setReplyCommentStatus = useSetRecoilState(replyCommentStatus);\r\n  const setReplyCommentUserStatus = useSetRecoilState(replyCommentUserStatus);\r\n\r\n  const { mutate: replyDeleteMutate } = useDeleteCommentReply(\r\n    commentReplyItem?.parentComment\r\n  );\r\n  const { mutate: replyLikeMutate } = usePostLikeCommentReply(\r\n    commentReplyItem?.parentComment\r\n  );\r\n\r\n  const location = useLocation();\r\n\r\n  // 댓글 삭제\r\n  const handleCommentDelete = useCallback(() => {\r\n    if (commentReplyItem) {\r\n      const commentReplyId = commentReplyItem._id;\r\n      const parentCommentId = commentReplyItem.parentComment;\r\n\r\n      replyDeleteMutate({ commentReplyId, parentCommentId });\r\n    }\r\n  }, [commentReplyItem, replyDeleteMutate]);\r\n\r\n  // 댓글 좋아요\r\n  const handleCommentLike = useCallback(() => {\r\n    if (commentReplyItem) {\r\n      const parentCommentId = commentReplyItem.parentComment;\r\n      const commentReplyId = commentReplyItem._id;\r\n\r\n      replyLikeMutate({\r\n        commentReplyId,\r\n        parentCommentId,\r\n        postId: params.id as string,\r\n      });\r\n    }\r\n  }, [commentReplyItem, replyLikeMutate]);\r\n\r\n  // 답글 달기\r\n  const handleReplyComment = useCallback((e: any) => {\r\n    setReplyCommentStatus(true);\r\n    setReplyCommentUserStatus({\r\n      userId: commentReplyItem?.user._id,\r\n      commentId: commentReplyItem?.parentComment,\r\n      nickName: commentReplyItem?.user?.nickname,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {isConfirmModalOpen && (\r\n        <ConfirmModal\r\n          text='삭제'\r\n          handleConfirm={() => {\r\n            handleCommentDelete();\r\n            setIsConfirmModalOpen(false);\r\n          }}\r\n          handleCancel={() => setIsConfirmModalOpen(false)}\r\n        />\r\n      )}\r\n\r\n      <CommentsItem $ispathname={location.pathname.includes('/commentList')}>\r\n        <FlexBox>\r\n          <UserImage src={commentReplyItem?.user?.avatar} alt='' />\r\n          <Box>\r\n            <FlexBox>\r\n              <Contents>\r\n                <Nickname>{commentReplyItem?.user?.nickname}</Nickname>\r\n\r\n                <TaggedUser className='user-reply-comment'>\r\n                  @{commentReplyItem?.parentCommentUser?.nickname}\r\n                </TaggedUser>\r\n                {commentReplyItem?.contents}\r\n              </Contents>\r\n            </FlexBox>\r\n            <Actions>\r\n              {commentReplyItem?.likes?.length !== 0 && (\r\n                <span>좋아요 {commentReplyItem?.likes?.length}개</span>\r\n              )}{' '}\r\n              <span onClick={handleReplyComment}>답글 달기</span>{' '}\r\n              {user?._id === commentReplyItem?.user._id && (\r\n                <span onClick={() => setIsConfirmModalOpen(true)}>\r\n                  댓글 삭제\r\n                </span>\r\n              )}\r\n            </Actions>\r\n          </Box>\r\n          <LikeBtn onClick={handleCommentLike}>\r\n            {commentReplyItem?.likes?.length !== 0 ? (\r\n              <>\r\n                {commentReplyItem?.likes?.map((like) =>\r\n                  like?.user === user?._id ? (\r\n                    <div key={like._id}>\r\n                      <FcLike />\r\n                    </div>\r\n                  ) : (\r\n                    <div key={like._id}>\r\n                      <SlHeart />\r\n                    </div>\r\n                  )\r\n                )}\r\n              </>\r\n            ) : (\r\n              <SlHeart />\r\n            )}\r\n          </LikeBtn>\r\n        </FlexBox>\r\n      </CommentsItem>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentReplyItem;\r\n","import { useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport useFetchCommentReplyList from 'hook/comments-reply/use-fetch-comment-reply-list';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport CommentReplyItem from './comment-reply-item';\r\n\r\nconst Container = styled.div``;\r\n\r\nconst ReplyList = styled.ul``;\r\n\r\nconst Box = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Line = styled.div`\r\n  border-bottom-width: 1px;\r\n  border-bottom-color: rgb(85, 85, 85);\r\n  border-bottom-style: solid;\r\n  width: 22px;\r\n  margin-right: 12px;\r\n`;\r\n\r\ninterface ICommentReplyProps {\r\n  parentCommentId: string;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  commentReplyCount: number;\r\n}\r\n\r\nconst CommentReplyList = ({\r\n  commentReplyCount,\r\n  parentCommentId,\r\n  setOpen,\r\n}: ICommentReplyProps) => {\r\n  const {\r\n    data: commentReplies,\r\n    isLoading,\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n  } = useFetchCommentReplyList(parentCommentId);\r\n\r\n  const [restCount, setRestCount] = useState(commentReplyCount - 3);\r\n\r\n  const fetchNext = useCallback(async () => {\r\n    const res = await fetchNextPage();\r\n    const newRestCount = restCount - 3;\r\n    setRestCount(newRestCount);\r\n\r\n    if (res.isError) {\r\n      console.log(res.error);\r\n    }\r\n  }, [fetchNextPage, restCount]);\r\n  return (\r\n    <Container>\r\n      <ReplyList>\r\n        {isLoading ? (\r\n          <FlexBox $justifyContent='center'>\r\n            <img className='spinner' src='/spinner.svg' alt='loading' />\r\n          </FlexBox>\r\n        ) : (\r\n          <>\r\n            {hasNextPage && restCount > 0 ? (\r\n              <Box onClick={fetchNext}>\r\n                <Line />\r\n                <span>답글 보기({restCount}개)</span>\r\n              </Box>\r\n            ) : (\r\n              <Box onClick={() => setOpen(false)}>\r\n                <Line />\r\n                <span>답글 숨기기</span>\r\n              </Box>\r\n            )}\r\n\r\n            {(isFetching || isFetchingNextPage) && (\r\n              <>\r\n                <FlexBox $justifyContent='center'>\r\n                  <img className='spinner' src='/spinner.svg' alt='loading' />\r\n                </FlexBox>\r\n              </>\r\n            )}\r\n\r\n            {commentReplies?.pages?.map((item) =>\r\n              item?.commentReply.map((commentReply) => (\r\n                <CommentReplyItem\r\n                  commentReplyItem={commentReply}\r\n                  key={commentReply._id}\r\n                />\r\n              ))\r\n            )}\r\n          </>\r\n        )}\r\n      </ReplyList>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CommentReplyList;\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport CommentReplyList from './comment-reply-list';\r\n\r\nconst Container = styled.div`\r\n  color: rgb(168, 168, 168);\r\n  font-size: 12px;\r\n  margin: 16px 0 0 54px;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Line = styled.div`\r\n  border-bottom-width: 1px;\r\n  border-bottom-color: rgb(85, 85, 85);\r\n  border-bottom-style: solid;\r\n  width: 22px;\r\n  margin-right: 12px;\r\n`;\r\n\r\ninterface ICommentReplyProps {\r\n  parentCommentId: string;\r\n  commentReplyCount: number;\r\n}\r\n\r\nconst CommentReply = ({\r\n  commentReplyCount,\r\n  parentCommentId,\r\n}: ICommentReplyProps) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <Container>\r\n      {!open && (\r\n        <Box onClick={() => setOpen(!open)}>\r\n          <Line />\r\n          <span>답글 보기({commentReplyCount}개)</span>\r\n        </Box>\r\n      )}\r\n\r\n      {open && (\r\n        <CommentReplyList\r\n          commentReplyCount={commentReplyCount}\r\n          parentCommentId={parentCommentId}\r\n          setOpen={setOpen}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CommentReply;\r\n","import { replyCommentStatus, replyCommentUserStatus } from 'atom/comment-atoms';\r\nimport { useUser } from 'hook/auth/use-user';\r\nimport { IComment } from 'interface/comment';\r\nimport { useCallback, useState } from 'react';\r\nimport { FcLike } from 'react-icons/fc';\r\nimport { SlHeart } from 'react-icons/sl';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useSetRecoilState } from 'recoil';\r\n\r\nimport useDeleteComment from 'hook/comments/use-delete-comment';\r\nimport usePostLikeComment from 'hook/comments/use-post-like-comment';\r\nimport styled from 'styled-components';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport ConfirmModal from 'components/common/modal/confirm-modal';\r\nimport CommentReply from '../comment-reply';\r\n\r\nconst CommentsItem = styled.li<{ $ispathname: boolean }>`\r\n  margin-right: -2px;\r\n  margin-top: 1rem;\r\n  width: 100%;\r\n  max-width: ${({ $ispathname }) => ($ispathname ? '500px' : '335px')};\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  color: rgb(245, 245, 245);\r\n`;\r\n\r\nconst Box = styled.div``;\r\n\r\nconst UserImage = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  flex-shrink: 0;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Nickname = styled.span`\r\n  font-weight: bold;\r\n  margin-right: 4px;\r\n  flex-shrink: 0;\r\n`;\r\n\r\nconst Contents = styled.span``;\r\n\r\nconst Actions = styled.div`\r\n  padding-top: 8px;\r\n  font-size: 12px;\r\n  color: rgb(168, 168, 168);\r\n\r\n  span {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst LikeBtn = styled.div`\r\n  cursor: pointer;\r\n  margin-top: 5px;\r\n  margin-left: auto;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\ninterface ICommentListProps {\r\n  comment: IComment;\r\n  postId: string | undefined;\r\n}\r\n\r\nconst CommentList = ({ comment, postId }: ICommentListProps) => {\r\n  const { user } = useUser();\r\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\r\n\r\n  const setReplyCommentStatus = useSetRecoilState(replyCommentStatus);\r\n  const setReplyCommentUserStatus = useSetRecoilState(replyCommentUserStatus);\r\n\r\n  const { mutate } = useDeleteComment(postId as string);\r\n  const { mutate: commentMutate } = usePostLikeComment(postId as string);\r\n\r\n  const location = useLocation();\r\n\r\n  // 댓글 삭제\r\n  const handleCommentDelete = useCallback(() => {\r\n    if (comment._id && postId) {\r\n      const commentId = comment._id;\r\n\r\n      mutate({ commentId, postId });\r\n    }\r\n  }, [comment._id, mutate, postId]);\r\n\r\n  // 댓글 좋아요\r\n  const handleCommentLike = useCallback(() => {\r\n    if (comment._id && postId) {\r\n      const commentId = comment._id;\r\n\r\n      commentMutate({ commentId, postId });\r\n    }\r\n  }, [comment._id, commentMutate, postId]);\r\n\r\n  // 답글 달기\r\n  const handleReplyComment = useCallback(() => {\r\n    setReplyCommentStatus(true);\r\n    setReplyCommentUserStatus({\r\n      userId: comment?.user?._id,\r\n      commentId: comment?._id,\r\n      nickName: comment?.user?.nickname,\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      {isConfirmModalOpen && (\r\n        <ConfirmModal\r\n          text='삭제'\r\n          handleConfirm={() => {\r\n            handleCommentDelete();\r\n            setIsConfirmModalOpen(false);\r\n          }}\r\n          handleCancel={() => setIsConfirmModalOpen(false)}\r\n        />\r\n      )}\r\n      <CommentsItem $ispathname={location.pathname.includes('/commentList')}>\r\n        <FlexBox>\r\n          <UserImage src={comment?.user?.avatar} alt='' />\r\n          <Box>\r\n            <FlexBox $alignItems='center'>\r\n              <Contents>\r\n                <Nickname>{comment?.user?.nickname}</Nickname>&nbsp;\r\n                {comment?.contents}\r\n              </Contents>\r\n            </FlexBox>\r\n            <Actions>\r\n              {comment?.likes?.length !== 0 && (\r\n                <span>좋아요 {comment?.likes?.length}개</span>\r\n              )}{' '}\r\n              <span onClick={handleReplyComment}>답글 달기</span>{' '}\r\n              {user?._id === comment?.user._id && (\r\n                <span onClick={() => setIsConfirmModalOpen(true)}>\r\n                  댓글 삭제\r\n                </span>\r\n              )}\r\n            </Actions>\r\n          </Box>\r\n          {user?._id === comment?.user._id && (\r\n            <LikeBtn onClick={handleCommentLike}>\r\n              {comment?.likes?.length !== 0 ? (\r\n                <>\r\n                  {comment?.likes?.map((like) =>\r\n                    like?.user === user?._id ? (\r\n                      <div key={like._id}>\r\n                        <FcLike />\r\n                      </div>\r\n                    ) : (\r\n                      <div key={like._id}>\r\n                        <SlHeart />\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <SlHeart />\r\n              )}\r\n            </LikeBtn>\r\n          )}\r\n        </FlexBox>\r\n        {/* 대댓글 */}\r\n        {comment?.commentReplyCount !== 0 && (\r\n          <CommentReply\r\n            commentReplyCount={comment?.commentReplyCount}\r\n            parentCommentId={comment?._id}\r\n          />\r\n        )}\r\n      </CommentsItem>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentList;\r\n","import FlexBox from 'components/common/flex-box';\r\nimport Skeleton from 'components/common/skeleton/skeleton';\r\n\r\nconst CommentSkeleton = () => {\r\n  return (\r\n    <FlexBox $padding='1rem 0 0 0'>\r\n      <Skeleton $borderradius={'50%'} width='35px' height='35px' />\r\n      <FlexBox\r\n        $direction='column'\r\n        $gap='5px'\r\n        $justifyContent='center'\r\n        $padding='0 0 0 10px'\r\n      >\r\n        <Skeleton $borderradius={'12px'} width='150px' height='10px' />\r\n        <Skeleton $borderradius={'12px'} width='100px' height='10px' />\r\n      </FlexBox>\r\n    </FlexBox>\r\n  );\r\n};\r\n\r\nexport default CommentSkeleton;\r\n","import styled from 'styled-components';\r\n\r\ninterface IFlexBox {\r\n  children: React.ReactNode;\r\n  style?: React.CSSProperties;\r\n  $direction?: string;\r\n  $justifyContent?: string;\r\n  $alignItems?: string;\r\n  $wrap?: string;\r\n  $gap?: string;\r\n  $padding?: string;\r\n  $background?: string;\r\n}\r\n\r\nconst Container = styled.div<IFlexBox>`\r\n  display: flex;\r\n  flex-direction: ${({ $direction }) => $direction || 'row'};\r\n  justify-content: ${({ $justifyContent }) => $justifyContent || 'flex-start'};\r\n  align-items: ${({ $alignItems }) => $alignItems || 'stretch'};\r\n  flex-wrap: ${({ $wrap }) => $wrap || 'nowrap'};\r\n  gap: ${({ $gap }) => $gap || '0'};\r\n  padding: ${({ $padding }) => $padding};\r\n  background: ${({ $background }) => $background || 'transparent'};\r\n`;\r\n\r\nconst FlexBox = ({\r\n  children,\r\n  $direction,\r\n  $justifyContent,\r\n  $alignItems,\r\n  $wrap,\r\n  $gap,\r\n  $padding,\r\n  $background,\r\n  style,\r\n}: IFlexBox) => {\r\n  return (\r\n    <Container\r\n      $direction={$direction}\r\n      $justifyContent={$justifyContent}\r\n      $alignItems={$alignItems}\r\n      $wrap={$wrap}\r\n      $gap={$gap}\r\n      $padding={$padding}\r\n      $background={$background}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FlexBox;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nimport Button from '../button';\r\n\r\nconst fadeInAnimation = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n    scale: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n    scale: 1.1;\r\n  }\r\n  100%{\r\n    scale: 1;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  color: #fff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 50;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  animation: ${fadeInAnimation} 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  font-weight: 700;\r\n  background-color: rgb(38, 38, 38);\r\n  width: 250px;\r\n  min-height: 48px;\r\n  padding: 4px 8px;\r\n  &:first-child {\r\n    border-top-left-radius: 12px;\r\n    border-top-right-radius: 12px;\r\n    border-bottom: 1px solid rgb(54, 54, 54);\r\n    color: rgb(237, 73, 86);\r\n  }\r\n  &:last-child {\r\n    border-bottom-left-radius: 12px;\r\n    border-bottom-right-radius: 12px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: rgb(29, 29, 29);\r\n  }\r\n`;\r\n\r\ninterface IConfirmModalProps {\r\n  text: string;\r\n  handleConfirm: () => void;\r\n  handleCancel: (value: React.SetStateAction<boolean>) => void;\r\n}\r\n\r\nconst ConfirmModal = ({\r\n  text,\r\n  handleConfirm,\r\n  handleCancel,\r\n}: IConfirmModalProps) => {\r\n  const onClick = () => {\r\n    handleConfirm();\r\n    handleCancel(false);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <StyledButton type='button' onClick={onClick}>\r\n          {text}\r\n        </StyledButton>\r\n        <StyledButton type='button' onClick={() => handleCancel(false)}>\r\n          취소\r\n        </StyledButton>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ConfirmModal;\r\n","import { IoChevronBackSharp } from 'react-icons/io5';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport Typography from 'components/common/typography';\r\nimport styled from 'styled-components';\r\n\r\nconst Box = styled.div<{ $pathname: string }>`\r\n  max-width: ${({ $pathname }) => ($pathname ? '100%' : '500px')};\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n\r\n  &::before {\r\n    background-color: rgb(54, 54, 54);\r\n    bottom: -1px;\r\n    content: '';\r\n    height: 1px;\r\n    left: 0;\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    max-width: 500px;\r\n  }\r\n`;\r\n\r\nconst IconBox = styled.div`\r\n  color: white;\r\n  font-size: 1.5rem;\r\n  z-index: 10;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst PostHeader = ({ text }: { text: string }) => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const handleGoBack = () => {\r\n    if (location.key === 'default') {\r\n      navigate('/posts');\r\n    } else {\r\n      navigate(-1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box $pathname={location.pathname === '/posts' ? 'true' : ''}>\r\n      <FlexBox\r\n        $alignItems='center'\r\n        $justifyContent='space-between'\r\n        $background='black'\r\n        $padding='5px 16px'\r\n      >\r\n        <IconBox\r\n          onClick={() => {\r\n            handleGoBack();\r\n          }}\r\n        >\r\n          <IoChevronBackSharp />\r\n        </IconBox>\r\n\r\n        <Typography tag={'p'} fontWeight='bold' fontSize='16px'>\r\n          {text}\r\n        </Typography>\r\n\r\n        <div></div>\r\n      </FlexBox>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PostHeader;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\n// 스켈레톤 애니메이션\r\nconst skeletonAnimation = keyframes`\r\n  0% {\r\n    background-position:100% 0%;\r\n  }\r\n  100% {\r\n    background-position:0% 0%;\r\n  }\r\n  `;\r\n\r\ninterface ISkeletonProps {\r\n  width: string;\r\n  height: string;\r\n  $borderradius?: string;\r\n  $margin?: string;\r\n}\r\n\r\nconst SkeletonElement = styled.div<ISkeletonProps>`\r\n  height: ${({ height }) => height};\r\n  width: ${({ width }) => width};\r\n  border-radius: ${({ $borderradius }) => $borderradius};\r\n  margin: ${({ $margin }) => $margin};\r\n  background: linear-gradient(90deg, #1e1e1e 35%, #0a0a0a 50%, #151515 65%);\r\n  /* background-size: 200px 100%; */\r\n  background-size: 300% auto;\r\n  animation: ${skeletonAnimation} 2s infinite linear;\r\n`;\r\n\r\nconst Skeleton = ({\r\n  width,\r\n  height,\r\n  $borderradius,\r\n  $margin,\r\n}: ISkeletonProps) => {\r\n  return (\r\n    <div>\r\n      <SkeletonElement\r\n        width={width}\r\n        height={height}\r\n        $borderradius={$borderradius}\r\n        $margin={$margin}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n","import { CSSProperties, ReactNode, createElement } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype TagVariants = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span';\r\n\r\ninterface ITypographyProps {\r\n  tag: TagVariants;\r\n  children: ReactNode;\r\n  style?: CSSProperties;\r\n}\r\n\r\nconst DynamicTypography = styled(\r\n  ({ tag, children, ...props }: ITypographyProps) =>\r\n    createElement(tag, props, children)\r\n)`\r\n  color: rgb(245, 245, 245);\r\n`;\r\n\r\nconst Typography = ({\r\n  tag = 'p',\r\n  children,\r\n  ...props\r\n}: ITypographyProps & CSSProperties) => (\r\n  <DynamicTypography tag={tag} style={{ ...props }}>\r\n    {children}\r\n  </DynamicTypography>\r\n);\r\n\r\nexport default Typography;\r\n","import { useInfiniteQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { ICommentResponse } from 'interface/comment';\r\nimport { commentKey } from 'react-query-key/comment.keys';\r\n\r\nconst fetchCommentList = async (postId: string, pageParam: number) => {\r\n  const res = await instance.get<ICommentResponse>(\r\n    `/api/comment/${postId}?page=${pageParam}`,\r\n    {\r\n      params: {\r\n        limit: 10,\r\n        page: pageParam,\r\n      },\r\n    }\r\n  );\r\n\r\n  return res.data;\r\n};\r\n\r\nconst useFetchCommentList = (postId: string) => {\r\n  const {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  } = useInfiniteQuery({\r\n    queryKey: [commentKey.comment, postId],\r\n    queryFn: ({ pageParam = 1 }) => fetchCommentList(postId, pageParam),\r\n    initialPageParam: 1,\r\n    getNextPageParam: (lastPage) => {\r\n      return lastPage.commentList?.length > 0 &&\r\n        lastPage.page !== lastPage.totalPage\r\n        ? lastPage.page + 1\r\n        : undefined;\r\n    },\r\n  });\r\n\r\n  return {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useFetchCommentList;\r\n","import { useQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { PostsDataType } from 'interface/posts';\r\nimport { postDetailKey } from 'react-query-key/post.keys';\r\n\r\nconst fetchPost = async (id: string) => {\r\n  const res = await instance.get<PostsDataType>(`/api/posts/${id}`);\r\n\r\n  return res.data;\r\n};\r\n\r\nconst useFetchPostDetail = (id: string) => {\r\n  const { data, isLoading, error } = useQuery({\r\n    queryKey: [postDetailKey.post, id],\r\n    queryFn: () => fetchPost(id),\r\n    refetchOnWindowFocus: false,\r\n    staleTime: 15000,\r\n  });\r\n\r\n  return { data, isLoading, error };\r\n};\r\n\r\nexport default useFetchPostDetail;\r\n","export const commentKey = {\r\n  comment: 'comment',\r\n  commentReply: 'comment-reply',\r\n};\r\n","export const postsKey = {\r\n  posts: 'posts',\r\n};\r\n\r\nexport const postDetailKey = {\r\n  post: 'post',\r\n  postLike: 'postLike',\r\n  postBookmark: 'postBookmark',\r\n};\r\n"],"names":["commentFormStatus","atom","key","default","replyCommentStatus","replyCommentUserStatus","userId","commentId","nickName","postComment","async","contents","postId","_ref","res","instance","post","msg","toast","error","setTimeout","window","location","reload","data","usePostComment","queryClient","useQueryClient","useMutation","mutationFn","mutationKey","onSuccess","invalidateQueries","queryKey","commentKey","comment","refetchType","postDetailKey","onError","_error$response","console","log","response","status","postReplyComment","concat","usePostReplyComment","commentReply","refetchQueries","Container","styled","div","_templateObject","_taggedTemplateLiteral","Form","form","_templateObject2","Textarea","textarea","_templateObject3","$iscontents","PostBtn","button","_templateObject4","_ref2","value","_ref3","Image","img","_templateObject5","_ref4","user","useUser","setContents","useState","mutate","isPending","replyCommentMutate","replyCommentIsPending","isReplyCommentStatus","setIsReplyCommentStatus","useRecoilState","replyCommentUser","setReplyCommentUser","isCommentFormFocus","setIsCommentFormFocus","formRef","useRef","submitComment","useCallback","_id","newContents","replace","useEffect","current","focus","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","_jsx","children","_jsxs","onSubmit","e","preventDefault","src","avatar","alt","FlexBox","$justifyContent","style","width","className","zIndex","_Fragment","placeholder","nickname","onChange","onKeyDown","ref","length","deleteComment","delete","postLikeComment","put","fetchNextPage","isFetching","isFetchingNextPage","hasNextPage","isLoading","useInfiniteQuery","queryFn","pageParam","get","params","limit","page","Promise","resolve","fetchCommentReplyList","initialPageParam","getNextPageParam","lastPage","_lastPage$commentRepl","totalPage","undefined","refetchOnWindowFocus","staleTime","Infinity","select","pages","reverse","pageParams","deleteCommentReply","commentReplyId","parentCommentId","_error$response$data","_error$response2","_error$response2$data","postLikeCommentReply","CommentsItem","li","$ispathname","Box","UserImage","Nickname","span","TaggedUser","Contents","_templateObject6","Actions","_templateObject7","LikeBtn","_templateObject8","_commentReplyItem$use2","_commentReplyItem$use3","_commentReplyItem$par","_commentReplyItem$lik","_commentReplyItem$lik2","_commentReplyItem$lik3","_commentReplyItem$lik4","commentReplyItem","useParams","isConfirmModalOpen","setIsConfirmModalOpen","setReplyCommentStatus","useSetRecoilState","setReplyCommentUserStatus","replyDeleteMutate","useDeleteCommentReply","parentComment","replyLikeMutate","usePostLikeCommentReply","useLocation","handleCommentDelete","handleCommentLike","id","handleReplyComment","_commentReplyItem$use","ConfirmModal","text","handleConfirm","handleCancel","pathname","includes","parentCommentUser","likes","onClick","map","like","FcLike","SlHeart","ReplyList","ul","Line","_commentReplies$pages","commentReplyCount","setOpen","commentReplies","useFetchCommentReplyList","restCount","setRestCount","fetchNext","isError","item","CommentReplyItem","open","CommentReplyList","_comment$user3","_comment$user4","_comment$likes","_comment$likes2","_comment$likes3","_comment$likes4","useDeleteComment","commentMutate","usePostLikeComment","_comment$user","_comment$user2","$alignItems","CommentReply","CommentSkeleton","$padding","Skeleton","$borderradius","height","$direction","$gap","$wrap","_ref5","_ref6","_ref7","$background","_ref8","fadeInAnimation","keyframes","Wrapper","StyledButton","Button","type","$pathname","IconBox","navigate","useNavigate","IoChevronBackSharp","Typography","tag","fontWeight","fontSize","skeletonAnimation","SkeletonElement","$margin","DynamicTypography","props","createElement","fetchCommentList","_lastPage$commentList","commentList","useQuery","fetchPost","postsKey","posts","postLike","postBookmark"],"sourceRoot":""}