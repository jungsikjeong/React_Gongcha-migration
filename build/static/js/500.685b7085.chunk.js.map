{"version":3,"file":"static/js/500.685b7085.chunk.js","mappings":"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","sources":["components/not-found.tsx","hook/use-intersection-observer.ts","utils/card-size-random.ts","pages/posts/hook/use-fetch-posts.tsx","pages/posts/index.tsx","react-query-key/post.keys.ts","../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst NotFoundContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  flex-direction: column;\r\n  background-color: black;\r\n  color: rgb(245, 245, 245);\r\n  white-space: pre-line;\r\n`;\r\n\r\nconst Text = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .longshadow {\r\n    font-size: 12rem;\r\n    color: #131313;\r\n    color: gray;\r\n    text-shadow: 4px 4px 0px #131313, 8px 8px 0px #131313, 12px 12px 0px #131313;\r\n    text-shadow: 4px 4px 0px gray, 8px 8px 0px gray, 12px 12px 0px gray;\r\n  }\r\n\r\n  .o {\r\n    color: tomato;\r\n    text-shadow: 4px 4px 0px tomato, 8px 8px 0px tomato, 12px 12px 0px tomato;\r\n    text-shadow: 4px 4px 0px tomato, 8px 8px 0px tomato, 12px 12px 0px gray;\r\n  }\r\n`;\r\n\r\nconst GoBack = styled.div`\r\n  color: rgb(224, 241, 255);\r\n  transition: all 0.3s ease;\r\n  margin-top: 10rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: rgb(179, 219, 255);\r\n  }\r\n`;\r\n\r\ninterface INotFound {\r\n  text?: string;\r\n}\r\n\r\nconst NotFound = ({ text }: INotFound) => {\r\n  const navigate = useNavigate();\r\n\r\n  const goBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  return (\r\n    <NotFoundContainer>\r\n      {!text ? (\r\n        <>\r\n          <Text>\r\n            <span className='longshadow'>\r\n              4<span className='o'>0</span>4\r\n            </span>\r\n            <span>페이지를 찾을 수 없습니다..</span>\r\n          </Text>\r\n\r\n          <GoBack onClick={goBack}>Go back</GoBack>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Text>{text}</Text>\r\n        </>\r\n      )}\r\n    </NotFoundContainer>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { RefObject, useEffect, useState } from 'react';\r\n\r\nfunction useIntersectionObserver(\r\n  elementRef: RefObject<Element>,\r\n  { threshold = 0.1, root = null, rootMargin = '0%' }\r\n) {\r\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\r\n  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {\r\n    setEntry(entry);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const node = elementRef?.current;\r\n    const hasIOSupport = !!window.IntersectionObserver;\r\n\r\n    if (!node || !hasIOSupport) return;\r\n\r\n    const obserParams = { threshold, root, rootMargin };\r\n    const observer = new IntersectionObserver(updateEntry, obserParams);\r\n\r\n    observer.observe(node);\r\n\r\n    return () => observer.disconnect();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [elementRef?.current, root, rootMargin, JSON.stringify(threshold)]);\r\n\r\n  return entry;\r\n}\r\n\r\nexport default useIntersectionObserver;\r\n","const CARDSMAL = 'card_small';\r\nconst CARDMEDIUM = 'card_medium';\r\nconst CARDLARGE = 'card_large';\r\n\r\nexport const cardSizeRandomFn = () => {\r\n  const cardSizes = [CARDSMAL, CARDMEDIUM, CARDLARGE];\r\n  const randomIndex = Math.floor(Math.random() * cardSizes.length);\r\n  return cardSizes[randomIndex];\r\n};\r\n","import { useInfiniteQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { PostsDataType } from 'interface/posts';\r\nimport { useEffect } from 'react';\r\nimport { postsKey } from 'react-query-key/post.keys';\r\nimport { toast } from 'react-toastify';\r\nimport { cardSizeRandomFn } from 'utils/card-size-random';\r\n\r\ninterface IPostsResponse {\r\n  page: number;\r\n  posts: PostsDataType[];\r\n  totalCount: number;\r\n  totalPage: number;\r\n}\r\n\r\nexport const fetchPosts = async (pageParam: number, searchParams: string) => {\r\n  if (searchParams) {\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n  }\r\n\r\n  const res = await instance.get<IPostsResponse>(\r\n    '/api/posts?/page=' + pageParam,\r\n    {\r\n      params: {\r\n        limit: 20,\r\n        page: pageParam,\r\n        searchParams,\r\n      },\r\n    }\r\n  );\r\n  const newResData = { ...res?.data };\r\n\r\n  const newData: PostsDataType[] = [];\r\n\r\n  res?.data?.posts.map((item) =>\r\n    newData.push({ ...item, className: cardSizeRandomFn() })\r\n  );\r\n  newResData.posts = newData;\r\n  return newResData;\r\n};\r\n\r\nconst useFetchPosts = (searchParams: string) => {\r\n  const {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  } = useInfiniteQuery({\r\n    queryKey: [postsKey.posts, searchParams],\r\n    queryFn: ({ pageParam = 1 }) => fetchPosts(pageParam, searchParams),\r\n    initialPageParam: 1,\r\n    getNextPageParam: (lastPage) => {\r\n      return lastPage.posts?.length > 0 && lastPage.page !== lastPage.totalPage\r\n        ? lastPage.page + 1\r\n        : undefined;\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      console.log(error);\r\n      toast.error('게시글을 불러오는데 실패했습니다.');\r\n    }\r\n  }, [error]);\r\n\r\n  return {\r\n    fetchNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n    hasNextPage,\r\n    isLoading,\r\n    data,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useFetchPosts;\r\n","import { useCallback, useEffect, useRef } from 'react';\r\nimport { Link, useSearchParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport useIntersectionObserver from 'hook/use-intersection-observer';\r\n\r\nimport Loading from 'components/common/loading';\r\nimport NotFound from 'components/not-found';\r\nimport useFetchPosts from './hook/use-fetch-posts';\r\n\r\nconst Container = styled.div`\r\n  padding-top: 10rem;\r\n  min-height: 100vh;\r\n  background: black;\r\n  overflow: hidden;\r\n  @media (max-width: 768px) {\r\n    padding-top: 5rem;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 0;\r\n  width: 80vw;\r\n  margin: 0 auto;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 250px);\r\n  grid-auto-rows: 10px;\r\n  justify-content: center;\r\n\r\n  .card_small {\r\n    grid-row-end: span 26;\r\n  }\r\n  .card_medium {\r\n    grid-row-end: span 33;\r\n  }\r\n  .card_large {\r\n    grid-row-end: span 45;\r\n  }\r\n`;\r\n\r\nconst Box = styled.div`\r\n  min-height: 1000px;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  padding: 0px;\r\n  margin: 15px 10px;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst PostsPage = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  const query = searchParams.get('search') || '';\r\n\r\n  const {\r\n    data,\r\n    isLoading,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isFetching,\r\n    isFetchingNextPage,\r\n  } = useFetchPosts(query as string);\r\n\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  const pageRef = useIntersectionObserver(ref, {});\r\n  const isPageEnd = !!pageRef?.isIntersecting; // 페이지 끝에도달\r\n\r\n  const fetchNext = useCallback(async () => {\r\n    const res = await fetchNextPage();\r\n\r\n    if (res.isError) {\r\n      console.log(res.error);\r\n    }\r\n  }, [fetchNextPage]);\r\n\r\n  useEffect(() => {\r\n    let timerId: NodeJS.Timeout | undefined;\r\n\r\n    if (isPageEnd && hasNextPage) {\r\n      timerId = setTimeout(() => {\r\n        fetchNext();\r\n      }, 500);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [fetchNext, isPageEnd, hasNextPage]);\r\n\r\n  if (!isLoading && data?.pages[0].posts.length === 0) {\r\n    return <NotFound text={'아직 작성된 게시글이 없습니다!'} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {isLoading ? (\r\n          <Box>\r\n            <Loading />\r\n          </Box>\r\n        ) : (\r\n          <>\r\n            <Wrapper>\r\n              {data?.pages?.map((page) =>\r\n                page?.posts?.map((post) => (\r\n                  <Card className={post.className} key={post._id}>\r\n                    <Link to={`/post/${post?._id}`}>\r\n                      <Image src={post?.images[0]} />\r\n                    </Link>\r\n                  </Card>\r\n                ))\r\n              )}\r\n            </Wrapper>\r\n          </>\r\n        )}\r\n\r\n        {(isFetching || isFetchingNextPage) && <Loading loader={true} />}\r\n      </Container>\r\n      <div\r\n        ref={ref}\r\n        style={{\r\n          height: '40px',\r\n          width: '100%',\r\n          marginBottom: '40px',\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostsPage;\r\n","export const postsKey = {\r\n  posts: 'posts',\r\n};\r\n\r\nexport const postDetailKey = {\r\n  post: 'post',\r\n  postLike: 'postLike',\r\n  postBookmark: 'postBookmark',\r\n};\r\n","import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseInfiniteQueryResult,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n} from './infiniteQueryOptions'\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): DefinedUseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery(\n  options: UseInfiniteQueryOptions,\n  queryClient?: QueryClient,\n) {\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  )\n}\n"],"names":["NotFoundContainer","styled","div","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","GoBack","_templateObject3","_ref","text","navigate","useNavigate","_jsx","children","_Fragment","_jsxs","className","onClick","goBack","elementRef","threshold","root","rootMargin","entry","setEntry","useState","updateEntry","_ref2","useEffect","node","current","hasIOSupport","window","IntersectionObserver","observer","observe","disconnect","JSON","stringify","cardSizeRandomFn","cardSizes","Math","floor","random","length","searchParams","fetchNextPage","isFetching","isFetchingNextPage","hasNextPage","isLoading","data","error","useInfiniteQuery","queryKey","postsKey","posts","queryFn","pageParam","async","_res$data","Promise","resolve","setTimeout","res","instance","get","params","limit","page","newResData","newData","map","item","push","fetchPosts","initialPageParam","getNextPageParam","lastPage","_lastPage$posts","totalPage","undefined","console","log","toast","Container","Wrapper","Box","Card","_templateObject4","Image","img","_templateObject5","PostsPage","_data$pages","setSearchParams","useSearchParams","query","useFetchPosts","ref","useRef","pageRef","useIntersectionObserver","isPageEnd","isIntersecting","fetchNext","useCallback","isError","timerId","clearTimeout","pages","Loading","_page$posts","post","Link","to","concat","_id","src","images","loader","style","height","width","marginBottom","NotFound","postDetailKey","postLike","postBookmark","InfiniteQueryObserver","QueryObserver","constructor","client","options","super","bindMethods","this","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","fetch","meta","fetchMore","direction","createResult","_state$fetchMeta","_state$fetchMeta2","state","result","isRefetching","fetchMeta","isFetchingPreviousPage","hasPreviousPage","queryClient","useBaseQuery"],"sourceRoot":""}