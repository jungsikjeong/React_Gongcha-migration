{"version":3,"file":"static/js/667.39d8dbff.chunk.js","mappings":"qKAIO,MAAMA,EAAaC,UAA6C,IAAtC,OAAEC,GAA8BC,EAC/D,IACE,MAAMC,GAAQC,EAAAA,EAAAA,MAYd,aAVkBC,EAAAA,EAAMC,IACtB,oBACA,CAAEL,UACF,CACEM,QAAS,CACPC,cAAc,UAADC,OAAYN,OAKpBO,IACb,CAAE,MAAOC,GAAa,IAADC,EACnBC,QAAQC,IAAIH,GAEoB,OAAvB,OAALA,QAAK,IAALA,GAAe,QAAVC,EAALD,EAAOI,gBAAQ,IAAAH,OAAV,EAALA,EAAiBI,UACnBC,EAAAA,GAAMN,MAAM,+IACZO,OAAOC,SAASC,SAEpB,GAGWC,EAAiBrB,UAAiD,IAA1C,SAAEsB,GAAkCC,EACvE,IACE,MAAMpB,GAAQC,EAAAA,EAAAA,MASd,aAPkBC,EAAAA,EAAMmB,KAAe,oBAAqBF,EAAU,CACpEf,QAAS,CACP,eAAgB,sBAChBC,cAAc,UAADC,OAAYN,OAIlBO,IACb,CAAE,MAAOC,GAAa,IAADc,EACa,OAAvB,OAALd,QAAK,IAALA,GAAe,QAAVc,EAALd,EAAOI,gBAAQ,IAAAU,OAAV,EAALA,EAAiBT,UACnBC,EAAAA,GAAMN,MAAM,uIACZO,OAAOC,SAASC,SAEpB,GAGWM,EAAoB1B,UAIT,IAJgB,SACtCsB,GAGDK,EACC,IACE,MAAMxB,GAAQC,EAAAA,EAAAA,MASd,aAPkBC,EAAAA,EAAMmB,KAAa,yBAA0BF,EAAU,CACvEf,QAAS,CACP,eAAgB,sBAChBC,cAAc,UAADC,OAAYN,OAIlBO,IACb,CAAE,MAAOC,GAAa,IAADiB,EAKnB,OAJgC,OAAvB,OAALjB,QAAK,IAALA,GAAe,QAAViB,EAALjB,EAAOI,gBAAQ,IAAAa,OAAV,EAALA,EAAiBZ,UACnBC,EAAAA,GAAMN,MAAM,uIACZO,OAAOC,SAASC,UAEX,EACT,E,kCCpEK,MAAMS,GAAkBC,E,OAAAA,IAAqB,CAClDC,IAAK,kBACLC,QAAS,I,oECSX,MAAMC,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uKAERnC,IAAA,IAAC,WAAEoC,GAAYpC,EAAA,OAAKoC,GAAc,KAAK,IACtCf,IAAA,IAAC,gBAAEgB,GAAiBhB,EAAA,OAAKgB,GAAmB,YAAY,IAC5DZ,IAAA,IAAC,YAAEa,GAAab,EAAA,OAAKa,GAAe,SAAS,IAC/CC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,GAAS,QAAQ,IACtCC,IAAA,IAAC,KAAEC,GAAMD,EAAA,OAAKC,GAAQ,GAAG,IACrBC,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAKC,CAAQ,IACvBC,IAAA,IAAC,YAAEC,GAAaD,EAAA,OAAKC,GAAe,aAAa,IA8BjE,EA3BgBC,IAUC,IAVA,SACfC,EAAQ,WACRZ,EAAU,gBACVC,EAAe,YACfC,EAAW,MACXE,EAAK,KACLE,EAAI,SACJE,EAAQ,YACRE,EAAW,MACXG,GACSF,EACT,OACEG,EAAAA,EAAAA,KAACnB,EAAS,CACRK,WAAYA,EACZC,gBAAiBA,EACjBC,YAAaA,EACbE,MAAOA,EACPE,KAAMA,EACNE,SAAUA,EACVE,YAAaA,EACbG,MAAOA,EAAMD,SAEZA,GACS,C,0HC1ChB,MAAMjB,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kRAatBnC,IAAA,IAAC,WAAEmD,GAAYnD,EAAA,OACfmD,IACAC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,4CAEF,IAIDd,IAAA,IAAC,WAAE8B,GAAY9B,EAAA,OACf8B,IACAC,EAAAA,EAAAA,IAAGE,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,yEAGF,IAGDoB,EAAWvB,EAAAA,GAAOC,IAAGuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,mIAQrBsB,EAAUzB,EAAAA,GAAOC,IAAGyB,IAAAA,GAAAvB,EAAAA,EAAAA,GAAA,0QAiBpBwB,EAAiB3B,EAAAA,GAAOC,IAAG2B,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,oHAO3B0B,EAAU7B,EAAAA,GAAOC,IAAG6B,IAAAA,GAAA3B,EAAAA,EAAAA,GAAA,kHAQpB4B,EAAS/B,EAAAA,GAAOC,IAAG+B,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,kXA4HzB,EA9FqBV,IAKM,IALL,SACpBuB,EAAQ,YACRiB,EAAW,OACXC,EAAM,WACNC,GAAa,GACM1C,EACnB,MAAM2C,GAAWC,EAAAA,EAAAA,QAAyB,MACpCC,GAAaD,EAAAA,EAAAA,QAA4B,OACxCE,EAAOC,IAAYC,EAAAA,EAAAA,UAAwB,MAuClD,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA3B,SAAA,EACEE,EAAAA,EAAAA,KAAA,SACE0B,KAAK,OACLC,IAAKT,EACLU,UAAQ,EACR7B,MAAO,CAAE8B,QAAS,QAClBC,SAxCoBC,IACxBA,EAAEC,iBAEF,MAAMC,EAAQF,EAAEG,OAAOD,MAEvB,IAAKA,GAA0B,IAAjBA,EAAME,OAAc,OAClC,IAAKF,EAAM,GAAGP,KAAKU,WAAW,UAE5B,YADAvE,EAAAA,GAAMwE,QAAQ,gFAIhB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACdlB,EAASgB,EAAOG,OAAiB,EAEnCH,EAAOI,cAAcT,EAAM,GAAG,EA0B1BU,QAAUZ,IAAkBA,EAXzBG,OAA4BU,MAAQ,EAWR,KAEjC5C,EAAAA,EAAAA,KAAA,QAAM2C,QA/CkBE,KACtB3B,EAAS4B,SAAS5B,EAAS4B,QAAQC,OAAO,EA8CTjD,SAAEA,IACpCuB,IACCG,EAAAA,EAAAA,MAAC3C,EAAS,CAACoB,YAA2B,IAAfgB,EAAsB,OAAS,GAAGnB,SAAA,EACvDE,EAAAA,EAAAA,KAACK,EAAQ,KACTmB,EAAAA,EAAAA,MAACjB,EAAO,CAAAT,SAAA,EACNE,EAAAA,EAAAA,KAAA,MAAIgD,UAAU,QAAOlD,SAAC,iDACtBE,EAAAA,EAAAA,KAACS,EAAc,CAAAX,UACbE,EAAAA,EAAAA,KAACW,EAAO,CAAAb,UACNE,EAAAA,EAAAA,KAACiD,EAAAA,EAAO,CACNtB,IAAKP,EACLL,YAAaA,GAAeA,EAC5BmC,mBAAoB,EACpBC,IAAK9B,EACL+B,SAAU,EACVC,MAAO,IACPC,OAAQ,IACRC,YAAY,EACZC,YAAU,EACVC,aAAc,EACdC,kBAAkB,EAClBC,QAAM,SAIZnC,EAAAA,EAAAA,MAACX,EAAM,CAAAf,SAAA,EACLE,EAAAA,EAAAA,KAAA,UAAQ2C,QAASA,IAAMrB,EAAS,MAAMxB,SAAC,kBACvCE,EAAAA,EAAAA,KAAA,UAAQgD,UAAU,OAAOL,QAnDjBiB,KAAO,IAADC,EACxB,GAA2C,qBAAd,QAAzBA,EAAOzC,EAAW0B,eAAO,IAAAe,OAAA,EAAlBA,EAAoBC,SAAyB,CACtD,MAAMC,EAAU3C,EAAW0B,QAAQgB,QAAQE,mBAAmBC,YAE9DjD,EAAO+C,GACPzC,EAAS,KACX,GA6CwDxB,SAAC,wCAOtD,C,8GC5LP,MAAMoE,EAAMpF,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oXACPnC,IAAA,IAAC,UAAEqH,GAAWrH,EAAA,OAAMqH,EAAY,OAAS,OAAO,IAwBzDC,EAAUtF,EAAAA,GAAOC,IAAGoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,qFA6C1B,EAtCmBd,IAAiC,IAAhC,KAAEkG,GAAwBlG,EAC5C,MAAMmG,GAAWC,EAAAA,EAAAA,MACXxG,GAAWyG,EAAAA,EAAAA,MAUjB,OACExE,EAAAA,EAAAA,KAACkE,EAAG,CAACC,UAAiC,WAAtBpG,EAAS0G,SAAwB,OAAS,GAAG3E,UAC3D0B,EAAAA,EAAAA,MAACkD,EAAAA,EAAO,CACNtF,YAAY,SACZD,gBAAgB,gBAChBS,YAAY,QACZF,SAAS,WAAUI,SAAA,EAEnBE,EAAAA,EAAAA,KAACoE,EAAO,CACNzB,QAASA,KAhBM,YAAjB5E,EAASY,IACX2F,EAAS,UAETA,GAAU,EAcU,EACdxE,UAEFE,EAAAA,EAAAA,KAAC2E,EAAAA,IAAkB,OAGrB3E,EAAAA,EAAAA,KAAC4E,EAAAA,EAAU,CAACC,IAAK,IAAKC,WAAW,OAAOC,SAAS,OAAMjF,SACpDuE,KAGHrE,EAAAA,EAAAA,KAAA,cAEE,C,8EC9DV,MAAMgF,GAAoBlG,EAAAA,EAAAA,KACxBhC,IAAA,IAAC,IAAE+H,EAAG,SAAE/E,KAAamF,GAAyBnI,EAAA,OAC5CoI,EAAAA,EAAAA,eAAcL,EAAKI,EAAOnF,EAAS,GAFbhB,CAGzBE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wCAcD,EAVmBd,IAAA,IAAC,IAClB0G,EAAM,IAAG,SACT/E,KACGmF,GAC8B9G,EAAA,OACjC6B,EAAAA,EAAAA,KAACgF,EAAiB,CAACH,IAAKA,EAAK9E,MAAO,IAAKkF,GAAQnF,SAC9CA,GACiB,C,yMClBtB,MAAMjB,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8CAKtBkG,EAAWrG,EAAAA,GAAOC,IAAGoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,gNAcrBmG,EAAQtG,EAAAA,GAAOuG,IAAGjF,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,sFAOlBqG,GAAcxG,EAAAA,EAAAA,IAAOyG,EAAAA,EAAOC,OAAd1G,CAAqBwB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,wMAoDzC,EAlCkBnC,IAA6D,IAA5D,OAAED,EAAM,0BAAE4I,GAA4C3I,EACvE,MAAO4I,EAAeC,IAAoBpE,EAAAA,EAAAA,UAAS,IAE7CqE,GAAYzE,EAAAA,EAAAA,QAAY,MAS9B,OAPA0E,EAAAA,EAAAA,YAAU,KAEK,OAATD,QAAS,IAATA,GAAAA,EAAW9C,SACb8C,EAAU9C,QAAQgD,OAAOC,QAAQlJ,EAAOsF,OAAS,EACnD,GACC,CAACtF,KAGFmD,EAAAA,EAAAA,KAACnB,EAAS,CAAAiB,UACRE,EAAAA,EAAAA,KAACgG,EAAAA,GAAM,CAACrE,IAAKiE,EAAWK,aAAc,EAAGC,cAAe,EAAEpG,SACvDjD,EAAOsJ,KAAI,CAACd,EAAKe,KAChBpG,EAAAA,EAAAA,KAACqG,EAAAA,GAAW,CAAAvG,UACV0B,EAAAA,EAAAA,MAAC2D,EAAQ,CAAArF,SAAA,EACPE,EAAAA,EAAAA,KAACsF,EAAW,CACV3C,QAASA,IAAM8C,EAA0BW,GACzCE,SAAU,CAAEC,MAAO,IACnBC,WAAY,CAAEC,SAAU,IAAM3G,UAE9BE,EAAAA,EAAAA,KAAC0G,EAAAA,IAAO,OAEV1G,EAAAA,EAAAA,KAACoF,EAAK,CAACjC,IAAKkC,EAAKsB,IAAI,oBATPP,QAcZ,E,gBClEhB,MAAMvH,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,QAEtBsB,EAAUzB,EAAAA,GAAOC,IAAGoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,QAEpB2H,EAAe9H,EAAAA,GAAO0G,OAAMpF,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,4GAO5B4H,EAAM/H,EAAAA,GAAOuG,IAAG/E,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,6FAOhB6H,EAAQhI,EAAAA,GAAOC,IAAGyB,IAAAA,GAAAvB,EAAAA,EAAAA,GAAA,iCAIlBqG,GAAcxG,EAAAA,EAAAA,IAAOyG,EAAAA,EAAOC,OAAd1G,CAAqB4B,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,sSA4HzC,EApGiBnC,IAIM,IAJL,aAChBiK,EAAY,UACZC,EAAS,gBACTC,GACenK,EACf,MAAOoK,EAAaC,IAAkB5F,EAAAA,EAAAA,UAAwB,OACvD6F,EAAMC,IAAW9F,EAAAA,EAAAA,UAAiB,KAClC+F,EAAkBC,IAAuBhG,EAAAA,EAAAA,UAAmB,KAE3DiG,UAAWC,EAAiB,cAAEC,IAAkBC,EAAAA,EAAAA,MAEjDC,EAAYC,IAAiBC,EAAAA,EAAAA,IAAerJ,EAAAA,GA0B7CsJ,EAAqB3B,IACzB,MAAM4B,EAAgB,IAAIV,GACpBW,EAAoB,IAAIL,GAE9B,KAAOI,EAAc5B,aAA0B8B,OACzCjB,EAAiB,CACnB,MAAMkB,EAAaC,MAAMC,QAAQtB,GAAgB,IAAIA,GAAgB,GACrEoB,EAAWG,KAAKN,EAAc5B,IAC9Ba,EAAgBkB,EAClB,CAGFH,EAAcO,OAAOnC,EAAO,GAC5B6B,EAAkBM,OAAOnC,EAAO,GAEhCmB,EAAoBS,GACpBH,EAAcI,EAAkB,EAgBlC,OAbApC,EAAAA,EAAAA,YAAU,KACJqB,GArCsBtK,WAC1B,IAAKsK,EAAa,OAElB,MAAMsB,GAAYC,EAAAA,EAAAA,GAAcvB,GAE1BwB,QAAwBhB,EAAcc,GAG5C,IAAKE,EAAiB,OACtBb,GAAec,GAAS,IAAIA,EAAMD,KAGlC,MAAME,EAAWC,IAAIC,gBAAgBJ,GAC/BK,EAAW,IAAIzB,EAAkBsB,GACvCrB,EAAoBwB,EAAS,EAwB3BC,EACF,GACC,CAAC9B,EAAaE,KAEjBvB,EAAAA,EAAAA,YAAU,KACJmB,IACFO,EAAoB,IAAIP,IACxBa,EAAc,IAAIb,IACpB,GACC,CAACA,KAGFhH,EAAAA,EAAAA,KAACnB,EAAS,CAAAiB,UACR0B,EAAAA,EAAAA,MAACjB,EAAO,CAAAT,SAAA,CACuB,IAA5BwH,EAAiBnF,QAAiBsF,EAW/BH,EAAiBnF,OAAS,IAAMsF,GAClCzH,EAAAA,EAAAA,KAACiJ,EAAS,CACRpM,OAAQyK,EACR7B,0BAA2BsC,KAG7B/H,EAAAA,EAAAA,KAAC8G,EAAK,CAAAhH,SAAE2H,GAAqB,8CAhB7BjG,EAAAA,EAAAA,MAAA,OAAKzB,MAAO,CAAEmJ,SAAU,YAAapJ,SAAA,EACnCE,EAAAA,EAAAA,KAACsF,EAAW,CACV3C,QAASA,IAAMoF,EAAkB,GACjCzB,SAAU,CAAEC,MAAO,IACnBC,WAAY,CAAEC,SAAU,IAAM3G,UAE9BE,EAAAA,EAAAA,KAAC0G,EAAAA,IAAO,OAEV1G,EAAAA,EAAAA,KAAC6G,EAAG,CAAC1D,IAAKmE,EAAiB,GAAIX,IAAI,yBAWvC3G,EAAAA,EAAAA,KAACmJ,EAAAA,EAAY,CAACnI,OA/EOK,IACzB,GAAIuG,EAAWzF,QAAU,EACvB,OAAOtE,EAAAA,GAAMN,MAAM,8GAErB8J,EAAQ+B,OACRjC,EAAe9F,EAAM,EA0EuBvB,UACtCE,EAAAA,EAAAA,KAAC4G,EAAY,CAAA9G,SAAC,uBAGR,C,kCC7JT,MAAM2I,EAAiBY,IAC5B,MAAMC,EAAaC,KAAKF,EAAQG,MAAM,KAAK,IACrCC,EAAaJ,EAAQG,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC5DE,EAAK,IAAIC,YAAYL,EAAWnH,QAChCyH,EAAK,IAAIC,WAAWH,GAC1B,IAAK,IAAII,EAAI,EAAGA,EAAIR,EAAWnH,OAAQ2H,IACrCF,EAAGE,GAAKR,EAAWS,WAAWD,GAEhC,MAAME,EAAO,IAAI9B,KAAK,CAACwB,GAAK,CAAEhI,KAAM+H,IACpC,OAAO,IAAIQ,KAAK,CAACD,GAAO,cAAe,CAAEtI,KAAM+H,GAAa,C,0DCN9D,MAiCA,EAjCyB9B,KACvB,MAAOH,EAAW0C,IAAgB3I,EAAAA,EAAAA,WAAS,GA6B3C,MAAO,CAAEmG,cA3Ba9K,UACpB,GAAI4K,EAAW,OAEf0C,GAAa,GACbzM,QAAQC,IAAI,wDAADL,OAAiBmL,EAAU2B,KAAO,KAAO,KAAI,QAExD,MAAMC,EAAU,CACdC,UAAW,EACXC,iBAAkB,MAGpB,IACE,MAAMC,QAAuBC,EAAAA,EAAAA,GAAiBhC,EAAW4B,GAQzD,OANA3M,QAAQC,IAAI,8DAADL,OACQkN,EAAeJ,KAAO,KAAO,KAAI,QAGpDD,GAAa,GAENK,CACT,CAAE,MAAOhN,GACP2M,GAAa,GACbzM,QAAQC,IAAIH,EACd,GAGsBiK,YAAW,C,2LCpBrC,MAAMiD,EAAY7N,UAAuD,IAAhD,MAAEgG,EAAK,SAAE8H,EAAQ,KAAEC,GAAuB7N,EAOjE,aANkB8N,EAAAA,EAASxM,KAAK,aAAc,CAC5CyM,QAASjI,EACT/F,OAAQ6N,EACRC,UAGSrN,IAAI,EAgCjB,EA7BqBwN,KACnB,MAAMxG,GAAWC,EAAAA,EAAAA,MAEXwG,GAAcC,EAAAA,EAAAA,MAEpB,OAAOC,EAAAA,EAAAA,GAAY,CACjBC,WAAYT,EACZU,YAAa,CAAC,aAEdC,UAAY9N,IACVyN,EAAYM,kBAAkB,CAC5BC,SAAU,CAACC,EAAAA,EAASC,OACpBC,YAAa,QAEfV,EAAYM,kBAAkB,CAC5BC,SAAU,CAACI,EAAAA,EAAUC,SACrBF,YAAa,QAGf5N,EAAAA,GAAM+N,QAAQ,wEACdtH,EAAS,SAAS,EAEpBuH,QAAUtO,IACRE,QAAQC,IAAI,SAAUH,GACtBM,EAAAA,GAAMN,MAAM,kGAAuB,GAErC,E,mDC/CJ,MAAMsB,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0KAWtB6M,EAAchN,EAAAA,GAAOC,IAAGoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,gDAKxB8M,EAASjN,EAAAA,GAAOC,IAAGqB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,4MAanB+M,EAAQlN,EAAAA,GAAOC,IAAGuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,8PAwGxB,EAhFenC,IAMM,IANL,YACdmP,EAAW,MACXrJ,EAAK,SACLsJ,EAAQ,KACRvB,EAAI,QACJwB,GACarP,EACb,MASMsP,EAAcvB,IAClB,MAAMwB,EAAYvO,OAAOwO,eAEzB,GAAID,GAAaA,EAAUE,YAAcF,EAAUG,WAAY,CAC7D,MAAMC,EAAQJ,EAAUE,WAAW,GACnCE,EAAMC,iBACN,MAAMC,EAAKC,SAAS1H,cAAc,OAClCyH,EAAGE,UAAYhC,EACf,MAAMiC,EAAOF,SAASG,yBACtB,IAAIC,EACAC,EACJ,KAAQD,EAAOL,EAAGO,YAChBD,EAAWH,EAAKK,YAAYH,GAG9B,GADAP,EAAMW,WAAWN,GACbG,EAAU,CACZ,MAAMI,EAAWZ,EAAMa,aACvBD,EAASE,cAAcN,GACvBI,EAASG,YAAYP,GACrBI,EAASI,UAAS,GAClBpB,EAAUqB,kBACVrB,EAAUsB,SAASN,EACrB,CACF,GAuBF,OACE7L,EAAAA,EAAAA,MAAC3C,EAAS,CAAAiB,SAAA,CACPmM,IAAgBrJ,IACf5C,EAAAA,EAAAA,KAAC8L,EAAW,CACV8B,wBAAyB,CAAEC,OAAQ5B,MAIvCjM,EAAAA,EAAAA,KAAC+L,EAAM,CAAC6B,wBAAyB,CAAEC,OAAQjL,MAC3C5C,EAAAA,EAAAA,KAACgM,EAAK,CACJ8B,iBAAiB,EACjBC,UAlEiBhM,IACrB,GAAkB,KAAdA,EAAEiM,QAIJ,OAHAjM,EAAEC,iBACFoK,EAAW,kBAEJ,CACT,EA6DI6B,QAAUlM,GAhCMA,KACpB,MAAMmM,EAAWnM,EAAEoM,cAAcC,UAAUC,MAAM,aAC3CC,EAAMvM,EAAEoM,cAAcC,UACzBG,QAAQ,QAAS,QACjBA,QAAQ,QAAS,QACjBA,QAAQ,uBAAwB,YAChCA,QAAQ,wBAAyB,oCACjCA,QAAQ,wBAAyB,oCACjCA,QACC,qKACA,mBAGAL,GACF/B,EAAQ+B,GAGVhC,EAASoC,EAAI,EAeOE,CAAazM,OAErB,E,cCnHhB,MAAMlD,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0FAMtBiF,EAAMpF,EAAAA,GAAOC,IAAGoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,0HAShBsB,GAAUzB,EAAAA,EAAAA,IAAOyG,EAAAA,EAAOxG,IAAdD,CAAkBsB,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,kDAK5BwP,EAAqB3P,EAAAA,GAAOC,IAAGuB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,0LAS/ByP,GAAY5P,EAAAA,EAAAA,IAAO6P,EAAAA,EAAP7P,CAAc0B,IAAAA,GAAAvB,EAAAA,EAAAA,GAAA,mHAMlBgG,GAAWA,EAAM2J,SAAW,MAAQ,MACrC3J,GAAWA,EAAM2J,SAAW,cAAgB,YAqEzD,EAlEkBC,KAChB,MAAOjM,EAAOsJ,IAAY3K,EAAAA,EAAAA,UAAS,KAC5BoJ,EAAMwB,IAAW5K,EAAAA,EAAAA,UAAmB,KACpCqG,EAAYC,IAAiBC,EAAAA,EAAAA,IAAerJ,EAAAA,IAE3CqQ,OAAQrE,EAAWsE,UAAWC,GAAclE,IAsBpD,OACEtJ,EAAAA,EAAAA,MAAC3C,EAAS,CAAAiB,SAAA,EACRE,EAAAA,EAAAA,KAACkE,EAAG,CAAApE,UACFE,EAAAA,EAAAA,KAACiP,EAAAA,EAAU,CAAC5K,KAAM,uCAGpBrE,EAAAA,EAAAA,KAACO,EAAO,CACN2O,QAAS,CAAEC,GAAI,IAAKC,QAAS,GAC7BC,QAAS,CAAEF,EAAG,EAAGC,QAAS,GAC1B5I,WAAY,CAAEC,SAAU,IAAM3G,UAE9B0B,EAAAA,EAAAA,MAACiN,EAAkB,CAAA3O,SAAA,EACjBE,EAAAA,EAAAA,KAACsP,EAAM,CACLrD,YAAW,2MACXrJ,MAAOA,EACPsJ,SAAUA,EACVvB,KAAMA,EACNwB,QAASA,KAGXnM,EAAAA,EAAAA,KAACuP,EAAAA,EAAQ,KAETvP,EAAAA,EAAAA,KAAC0O,EAAS,CACRhN,KAAK,SACLiB,QA5CO/F,UACf,GAA0B,IAAtBgL,EAAWzF,OACb,OAAOtE,EAAAA,GAAMN,MAAM,kGACd,CACL,MAAMW,EAAW,IAAIsR,SAErB5H,EAAW6H,SAAQ,CAACC,EAAMtJ,KACxBlI,EAASyR,OAAO,QAASD,EAAK,IAGhC,MAAMhF,QAAiBzM,EAAAA,EAAAA,IAAe,CAAEC,aAEpCwM,GAAgC,IAApBA,EAASvI,SACvBsI,EAAU,CAAE7H,QAAO8H,WAAUC,SAE7B9C,EAAc,IAElB,GA4BQ+G,SAAgC,IAAtBhH,EAAWzF,OAAarC,SAEjCkP,GACChP,EAAAA,EAAAA,KAAA,OAAKmD,IAAI,gBAAgBwD,IAAI,UAAU3D,UAAU,YAEjD,wBAKE,C,iCCrHT,MAAM0I,EAAY,CACvBC,QAAS,UACTiE,WAAY,a,0CCFP,MAAMrE,EAAW,CACtBC,MAAO,SAGIqE,EAAgB,CAC3BzR,KAAM,OACN0R,SAAU,WACVC,aAAc,e","sources":["api/file-upload.ts","atom/file-object-atoms.tsx","components/common/flex-box.tsx","components/common/image-cropper.tsx","components/common/post-header.tsx","components/common/typography.tsx","components/img-swiper.tsx","components/file-form/index.tsx","components/uitls/data-url-to-file.ts","hook/use-image-compress.tsx","pages/write/hook/use-post-write.tsx","pages/write/editor.tsx","pages/write/index.tsx","react-query-key/my-page-keys.ts","react-query-key/post.keys.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { getToken } from 'utils/token.localstorage';\r\n\r\nexport const deleteFile = async ({ images }: { images: string[] }) => {\r\n  try {\r\n    const token = getToken();\r\n\r\n    const res = await axios.put<string[]>(\r\n      '/api/posts/upload',\r\n      { images },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.log(error);\r\n\r\n    if (error?.response?.status === 401) {\r\n      toast.error('파일 삭제 중 에러가 발생했습니다. 다시 시도해주세요');\r\n      window.location.reload();\r\n    }\r\n  }\r\n};\r\n\r\nexport const postFileUpload = async ({ formData }: { formData: FormData }) => {\r\n  try {\r\n    const token = getToken();\r\n\r\n    const res = await axios.post<string[]>('/api/posts/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    return res.data;\r\n  } catch (error: any) {\r\n    if (error?.response?.status === 401) {\r\n      toast.error('업로드중 에러가 발생했습니다. 다시 시도해주세요');\r\n      window.location.reload();\r\n    }\r\n  }\r\n};\r\n\r\nexport const profileFileUpload = async ({\r\n  formData,\r\n}: {\r\n  formData: FormData;\r\n}): Promise<string> => {\r\n  try {\r\n    const token = getToken();\r\n\r\n    const res = await axios.post<string>('/api/users/edit/avatar', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    return res.data;\r\n  } catch (error: any) {\r\n    if (error?.response?.status === 401) {\r\n      toast.error('업로드중 에러가 발생했습니다. 다시 시도해주세요');\r\n      window.location.reload();\r\n    }\r\n    return '';\r\n  }\r\n};\r\n","import { FileObjectType } from 'interface/file-object-type';\r\nimport { atom } from 'recoil';\r\n\r\nexport const fileObjectState = atom<FileObjectType>({\r\n  key: 'fileObjectState',\r\n  default: [],\r\n});\r\n","import styled from 'styled-components';\r\n\r\ninterface IFlexBox {\r\n  children: React.ReactNode;\r\n  style?: React.CSSProperties;\r\n  $direction?: string;\r\n  $justifyContent?: string;\r\n  $alignItems?: string;\r\n  $wrap?: string;\r\n  $gap?: string;\r\n  $padding?: string;\r\n  $background?: string;\r\n}\r\n\r\nconst Container = styled.div<IFlexBox>`\r\n  display: flex;\r\n  flex-direction: ${({ $direction }) => $direction || 'row'};\r\n  justify-content: ${({ $justifyContent }) => $justifyContent || 'flex-start'};\r\n  align-items: ${({ $alignItems }) => $alignItems || 'stretch'};\r\n  flex-wrap: ${({ $wrap }) => $wrap || 'nowrap'};\r\n  gap: ${({ $gap }) => $gap || '0'};\r\n  padding: ${({ $padding }) => $padding};\r\n  background: ${({ $background }) => $background || 'transparent'};\r\n`;\r\n\r\nconst FlexBox = ({\r\n  children,\r\n  $direction,\r\n  $justifyContent,\r\n  $alignItems,\r\n  $wrap,\r\n  $gap,\r\n  $padding,\r\n  $background,\r\n  style,\r\n}: IFlexBox) => {\r\n  return (\r\n    <Container\r\n      $direction={$direction}\r\n      $justifyContent={$justifyContent}\r\n      $alignItems={$alignItems}\r\n      $wrap={$wrap}\r\n      $gap={$gap}\r\n      $padding={$padding}\r\n      $background={$background}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FlexBox;\r\n","import 'cropperjs/dist/cropper.css';\r\nimport { useRef, useState } from 'react';\r\nimport { Cropper, ReactCropperElement } from 'react-cropper';\r\nimport { toast } from 'react-toastify';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Container = styled.div<{ profileimg: string }>`\r\n  z-index: 20;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .cropper-crop-box,\r\n  .cropper-view-box {\r\n    ${({ profileimg }) =>\r\n      profileimg &&\r\n      css`\r\n        border-radius: 50%;\r\n      `}\r\n  }\r\n\r\n  .cropper-view-box {\r\n    ${({ profileimg }) =>\r\n      profileimg &&\r\n      css`\r\n        box-shadow: 0 0 0 1px #39f;\r\n        outline: 0;\r\n      `}\r\n  }\r\n`;\r\nconst BackDrop = styled.div`\r\n  position: inherit;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  backdrop-filter: blur(8px);\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  z-index: 2;\r\n  background: #ffffff;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .title {\r\n    font-weight: 600;\r\n    line-height: 26px;\r\n    padding: 20px 16px;\r\n    text-align: center;\r\n    color: black;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #ffffff;\r\n`;\r\nconst Content = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: white;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  padding: 20px 16px;\r\n  background: #ffffff;\r\n  column-gap: 12px;\r\n\r\n  button {\r\n    width: 100px;\r\n    height: 40px;\r\n    border: 1px solid #c3c3c3;\r\n    border-radius: 4px;\r\n    background: white;\r\n  }\r\n\r\n  .crop {\r\n    background: #cf3e58;\r\n    color: white;\r\n    border: none;\r\n  }\r\n`;\r\n\r\ninterface IImageCropperProps {\r\n  onCrop: (image: string) => void;\r\n  aspectRatio?: number;\r\n  profileImg?: boolean;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ImageCropper = ({\r\n  children,\r\n  aspectRatio,\r\n  onCrop,\r\n  profileImg = false,\r\n}: IImageCropperProps) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const cropperRef = useRef<ReactCropperElement>(null);\r\n  const [image, setImage] = useState<null | string>(null);\r\n\r\n  const handleChildrenClick = () => {\r\n    if (inputRef.current) inputRef.current.click();\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n\r\n    const files = e.target.files;\r\n\r\n    if (!files || files.length === 0) return;\r\n    if (!files[0].type.startsWith('image/')) {\r\n      toast.warning('이 파일은 이미지가 아닙니다.');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setImage(reader.result as string);\r\n    };\r\n    reader.readAsDataURL(files[0]);\r\n  };\r\n\r\n  const getCropData = () => {\r\n    if (typeof cropperRef.current?.cropper !== 'undefined') {\r\n      const dataURL = cropperRef.current.cropper.getCroppedCanvas().toDataURL();\r\n\r\n      onCrop(dataURL);\r\n      setImage(null);\r\n    }\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<HTMLInputElement, MouseEvent>\r\n  ) => {\r\n    (event.target as HTMLInputElement).value = '';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='file'\r\n        ref={inputRef}\r\n        multiple\r\n        style={{ display: 'none' }}\r\n        onChange={handleFileChange}\r\n        onClick={(e) => handleClick(e)}\r\n      />\r\n      <span onClick={handleChildrenClick}>{children}</span>\r\n      {image && (\r\n        <Container profileimg={profileImg === true ? 'true' : ''}>\r\n          <BackDrop />\r\n          <Wrapper>\r\n            <h3 className='title'>이미지 편집하기</h3>\r\n            <ContentWrapper>\r\n              <Content>\r\n                <Cropper\r\n                  ref={cropperRef}\r\n                  aspectRatio={aspectRatio && aspectRatio}\r\n                  initialAspectRatio={1}\r\n                  src={image}\r\n                  viewMode={1}\r\n                  width={800}\r\n                  height={500}\r\n                  background={false}\r\n                  responsive\r\n                  autoCropArea={1}\r\n                  checkOrientation={false}\r\n                  guides\r\n                />\r\n              </Content>\r\n            </ContentWrapper>\r\n            <Footer>\r\n              <button onClick={() => setImage(null)}>취소</button>\r\n              <button className='crop' onClick={getCropData}>\r\n                적용하기\r\n              </button>\r\n            </Footer>\r\n          </Wrapper>\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageCropper;\r\n","import { IoChevronBackSharp } from 'react-icons/io5';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport Typography from 'components/common/typography';\r\nimport styled from 'styled-components';\r\n\r\nconst Box = styled.div<{ $pathname: string }>`\r\n  max-width: ${({ $pathname }) => ($pathname ? '100%' : '500px')};\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  z-index: 10;\r\n\r\n  &::before {\r\n    background-color: rgb(54, 54, 54);\r\n    bottom: -1px;\r\n    content: '';\r\n    height: 1px;\r\n    left: 0;\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    max-width: 500px;\r\n  }\r\n`;\r\n\r\nconst IconBox = styled.div`\r\n  color: white;\r\n  font-size: 1.5rem;\r\n  z-index: 10;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst PostHeader = ({ text }: { text: string }) => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const handleGoBack = () => {\r\n    if (location.key === 'default') {\r\n      navigate('/posts');\r\n    } else {\r\n      navigate(-1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box $pathname={location.pathname === '/posts' ? 'true' : ''}>\r\n      <FlexBox\r\n        $alignItems='center'\r\n        $justifyContent='space-between'\r\n        $background='black'\r\n        $padding='5px 16px'\r\n      >\r\n        <IconBox\r\n          onClick={() => {\r\n            handleGoBack();\r\n          }}\r\n        >\r\n          <IoChevronBackSharp />\r\n        </IconBox>\r\n\r\n        <Typography tag={'p'} fontWeight='bold' fontSize='16px'>\r\n          {text}\r\n        </Typography>\r\n\r\n        <div></div>\r\n      </FlexBox>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PostHeader;\r\n","import { CSSProperties, ReactNode, createElement } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype TagVariants = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span';\r\n\r\ninterface ITypographyProps {\r\n  tag: TagVariants;\r\n  children: ReactNode;\r\n  style?: CSSProperties;\r\n}\r\n\r\nconst DynamicTypography = styled(\r\n  ({ tag, children, ...props }: ITypographyProps) =>\r\n    createElement(tag, props, children)\r\n)`\r\n  color: rgb(245, 245, 245);\r\n`;\r\n\r\nconst Typography = ({\r\n  tag = 'p',\r\n  children,\r\n  ...props\r\n}: ITypographyProps & CSSProperties) => (\r\n  <DynamicTypography tag={tag} style={{ ...props }}>\r\n    {children}\r\n  </DynamicTypography>\r\n);\r\n\r\nexport default Typography;\r\n","import { motion } from 'framer-motion';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport styled from 'styled-components';\r\nimport 'swiper/css';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ImageBox = styled.div`\r\n  position: relative;\r\n  width: 220px;\r\n  aspect-ratio: auto 1/1;\r\n  margin: 0 auto;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 190px;\r\n  }\r\n  @media (max-width: 375px) {\r\n    width: 140px;\r\n  }\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CloseButton = styled(motion.button)`\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  font-size: 20px;\r\n  color: white;\r\n  background-color: black;\r\n  border-radius: 50%;\r\n  width: 25px;\r\n  height: 25px;\r\n  z-index: 10;\r\n`;\r\n\r\ninterface IImgSwiperProps {\r\n  images: string[];\r\n  handleCompressImageDelete: (index: number) => void;\r\n}\r\n\r\nconst ImgSwiper = ({ images, handleCompressImageDelete }: IImgSwiperProps) => {\r\n  const [selectedImage, setSelectedImage] = useState('');\r\n\r\n  const swiperRef = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    // Move swiper to the last slide when images change\r\n    if (swiperRef?.current) {\r\n      swiperRef.current.swiper.slideTo(images.length - 1);\r\n    }\r\n  }, [images]);\r\n\r\n  return (\r\n    <Container>\r\n      <Swiper ref={swiperRef} spaceBetween={0} slidesPerView={2}>\r\n        {images.map((img, index) => (\r\n          <SwiperSlide key={index}>\r\n            <ImageBox>\r\n              <CloseButton\r\n                onClick={() => handleCompressImageDelete(index)}\r\n                whileTap={{ scale: 0.8 }}\r\n                transition={{ duration: 0.2 }}\r\n              >\r\n                <IoClose />\r\n              </CloseButton>\r\n              <Image src={img} alt='img-preview' />\r\n            </ImageBox>\r\n          </SwiperSlide>\r\n        ))}\r\n      </Swiper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ImgSwiper;\r\n","import ImageCropper from 'components/common/image-cropper';\r\nimport { motion } from 'framer-motion';\r\nimport { useEffect, useState } from 'react';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { toast } from 'react-toastify';\r\nimport uuid from 'react-uuid';\r\nimport { useRecoilState } from 'recoil';\r\nimport styled from 'styled-components';\r\n\r\nimport { fileObjectState } from 'atom/file-object-atoms';\r\nimport { dataURItoFile } from 'components/uitls/data-url-to-file';\r\nimport useImageCompress from 'hook/use-image-compress';\r\n\r\nimport ImgSwiper from 'components/img-swiper';\r\n\r\nconst Container = styled.div``;\r\n\r\nconst Wrapper = styled.div``;\r\n\r\nconst UploadButton = styled.button`\r\n  padding: 0.5rem;\r\n  margin: 0.5rem 0;\r\n  color: #afe4f8;\r\n  border: 1px solid rgb(38, 38, 38);\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  aspect-ratio: auto 1/1;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst CloseButton = styled(motion.button)`\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  bottom: 0;\r\n  font-size: 20px;\r\n  color: white;\r\n  background-color: black;\r\n  border-radius: 50%;\r\n  width: 25px;\r\n  height: 25px;\r\n  z-index: 10;\r\n  transition: all 0.3s ease;\r\n  &:hover {\r\n    box-shadow: 0 0 5px black;\r\n  }\r\n`;\r\n\r\ninterface IFileFormProps {\r\n  oldImages?: string[] | undefined;\r\n  deleteImages?: string[] | undefined;\r\n  setDeleteImages?: React.Dispatch<React.SetStateAction<string[]>>;\r\n}\r\n\r\nconst FileForm = ({\r\n  deleteImages,\r\n  oldImages,\r\n  setDeleteImages,\r\n}: IFileFormProps) => {\r\n  const [uploadImage, setUploadImage] = useState<string | null>(null);\r\n  const [uuId, setUuId] = useState<string>('');\r\n  const [compressedImages, setCompressedImages] = useState<string[]>([]);\r\n\r\n  const { isLoading: isCompressLoading, compressImage } = useImageCompress();\r\n\r\n  const [fileObject, setFileObject] = useRecoilState(fileObjectState);\r\n\r\n  const handleUploadImage = (image: string) => {\r\n    if (fileObject.length >= 5) {\r\n      return toast.error('이미지는 최대 다섯개까지만 올려주세요!');\r\n    }\r\n    setUuId(uuid());\r\n    setUploadImage(image);\r\n  };\r\n  const handleCompressImage = async () => {\r\n    if (!uploadImage) return;\r\n\r\n    const imageFile = dataURItoFile(uploadImage);\r\n    // Blob객체를 리턴함\r\n    const compressedImage = await compressImage(imageFile);\r\n\r\n    // 이미지 서버 저장 로직\r\n    if (!compressedImage) return;\r\n    setFileObject((prev) => [...prev, compressedImage]);\r\n\r\n    // Blob객체를 URL로만듦\r\n    const imageUrl = URL.createObjectURL(compressedImage);\r\n    const newImage = [...compressedImages, imageUrl];\r\n    setCompressedImages(newImage);\r\n  };\r\n\r\n  const handleImageDelete = (index: number) => {\r\n    const updatedImages = [...compressedImages];\r\n    const updatedFileObject = [...fileObject];\r\n    // Blob 객체가 아니면 deleteImg 객체에 추가하기\r\n    if (!((updatedImages[index] as any) instanceof Blob)) {\r\n      if (setDeleteImages) {\r\n        const deleteImgs = Array.isArray(deleteImages) ? [...deleteImages] : [];\r\n        deleteImgs.push(updatedImages[index]);\r\n        setDeleteImages(deleteImgs);\r\n      }\r\n    }\r\n\r\n    updatedImages.splice(index, 1);\r\n    updatedFileObject.splice(index, 1);\r\n\r\n    setCompressedImages(updatedImages);\r\n    setFileObject(updatedFileObject);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (uploadImage) {\r\n      handleCompressImage();\r\n    }\r\n  }, [uploadImage, uuId]);\r\n  // 기존에 업로드된 이미지의 url 가져옴\r\n  useEffect(() => {\r\n    if (oldImages) {\r\n      setCompressedImages([...oldImages]);\r\n      setFileObject([...oldImages]);\r\n    }\r\n  }, [oldImages]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        {compressedImages.length === 1 && !isCompressLoading ? (\r\n          <div style={{ position: 'relative' }}>\r\n            <CloseButton\r\n              onClick={() => handleImageDelete(0)}\r\n              whileTap={{ scale: 0.8 }}\r\n              transition={{ duration: 0.2 }}\r\n            >\r\n              <IoClose />\r\n            </CloseButton>\r\n            <Img src={compressedImages[0]} alt='compressed image' />\r\n          </div>\r\n        ) : compressedImages.length > 1 && !isCompressLoading ? (\r\n          <ImgSwiper\r\n            images={compressedImages}\r\n            handleCompressImageDelete={handleImageDelete}\r\n          />\r\n        ) : (\r\n          <Cover>{isCompressLoading && '이미지 압축 중..'}</Cover>\r\n        )}\r\n\r\n        <ImageCropper onCrop={handleUploadImage}>\r\n          <UploadButton>📷</UploadButton>\r\n        </ImageCropper>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FileForm;\r\n","export const dataURItoFile = (dataURI: string) => {\r\n  const byteString = atob(dataURI.split(',')[1]);\r\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n  const ab = new ArrayBuffer(byteString.length);\r\n  const ia = new Uint8Array(ab);\r\n  for (let i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n  const blob = new Blob([ab], { type: mimeString });\r\n  return new File([blob], 'uploadImage', { type: mimeString });\r\n};\r\n","import imageCompression from 'browser-image-compression';\r\nimport { useState } from 'react';\r\n\r\nconst useImageCompress = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const compressImage = async (imageFile: File) => {\r\n    if (isLoading) return;\r\n\r\n    setIsLoading(true);\r\n    console.log(`원본 이미지 사이즈 : ${imageFile.size / 1024 / 1024} MB`);\r\n\r\n    const options = {\r\n      maxSizeMB: 2,\r\n      maxWidthOrHeight: 1920,\r\n    };\r\n\r\n    try {\r\n      const compressedFile = await imageCompression(imageFile, options);\r\n\r\n      console.log(\r\n        `압축된 이미지 사이즈 : ${compressedFile.size / 1024 / 1024} MB`\r\n      );\r\n\r\n      setIsLoading(false);\r\n\r\n      return compressedFile;\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return { compressImage, isLoading };\r\n};\r\n\r\nexport default useImageCompress;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { myPageKey } from 'react-query-key/my-page-keys';\r\nimport { postsKey } from 'react-query-key/post.keys';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IPostWriteProps {\r\n  value: string;\r\n  fileInfo: string[];\r\n  tags: string[];\r\n}\r\n\r\nconst postWrite = async ({ value, fileInfo, tags }: IPostWriteProps) => {\r\n  const res = await instance.post('/api/posts', {\r\n    content: value,\r\n    images: fileInfo,\r\n    tags,\r\n  });\r\n\r\n  return res.data;\r\n};\r\n\r\nconst usePostWrite = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postWrite,\r\n    mutationKey: ['postWrite'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postsKey.posts],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.invalidateQueries({\r\n        queryKey: [myPageKey.myPosts],\r\n        refetchType: 'all',\r\n      });\r\n\r\n      toast.success('게시물이 작성되었습니다.');\r\n      navigate('/posts');\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('게시물 작성 중 오류가 발생했습니다.');\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostWrite;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: none;\r\n  min-height: 168px;\r\n  max-height: 168px;\r\n  outline: none;\r\n`;\r\n\r\nconst Placeholder = styled.div`\r\n  padding-top: 2rem;\r\n  color: #999;\r\n`;\r\n\r\nconst Output = styled.div`\r\n  padding-top: 2rem;\r\n  text-align: left;\r\n  width: 100%;\r\n  height: auto;\r\n  min-height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  overflow-y: visible;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Input = styled.div`\r\n  padding-top: 2rem;\r\n  text-align: left;\r\n  width: 100%;\r\n  height: auto;\r\n  min-height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  overflow-y: visible;\r\n  border: none;\r\n  outline: none;\r\n  box-sizing: border-box;\r\n  z-index: 1;\r\n`;\r\n\r\ninterface IEditorProps {\r\n  placeholder: string;\r\n  value: string;\r\n  setValue: React.Dispatch<React.SetStateAction<string>>;\r\n  tags: string[];\r\n  setTags: React.Dispatch<React.SetStateAction<string[]>>;\r\n}\r\n\r\nconst Editor = ({\r\n  placeholder,\r\n  value,\r\n  setValue,\r\n  tags,\r\n  setTags,\r\n}: IEditorProps) => {\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      putAtCaret(' \\n<br>\\u200B');\r\n\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const putAtCaret = (content: string) => {\r\n    const selection = window.getSelection();\r\n\r\n    if (selection && selection.getRangeAt && selection.rangeCount) {\r\n      const range = selection.getRangeAt(0);\r\n      range.deleteContents();\r\n      const el = document.createElement('div');\r\n      el.innerHTML = content;\r\n      const frag = document.createDocumentFragment();\r\n      let node;\r\n      let lastNode;\r\n      while ((node = el.firstChild)) {\r\n        lastNode = frag.appendChild(node);\r\n      }\r\n      range.insertNode(frag);\r\n      if (lastNode) {\r\n        const newRange = range.cloneRange();\r\n        newRange.setStartAfter(lastNode);\r\n        newRange.setEndAfter(lastNode);\r\n        newRange.collapse(true);\r\n        selection.removeAllRanges();\r\n        selection.addRange(newRange);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLDivElement>) => {\r\n    const hashTags = e.currentTarget.innerText.match(/#[^\\s#]+/g);\r\n    const str = e.currentTarget.innerText\r\n      .replace(/(<)/gi, '&lt;')\r\n      .replace(/(<)/gi, '&lg;')\r\n      .replace(/(?:\\r\\n|\\n\\r|\\r|\\n)/g, '\\n<br />')\r\n      .replace(/#(.+?)(?=[\\s.,:,]|$)/g, \"<span class='hashtag'>#$1</span>\")\r\n      .replace(/@(.+?)(?=[\\s.,:,]|$)/g, \"<span class='mention'>@$1</span>\")\r\n      .replace(\r\n        /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/g,\r\n        '<span>$1</span>'\r\n      );\r\n\r\n    if (hashTags) {\r\n      setTags(hashTags);\r\n    }\r\n\r\n    setValue(str);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {placeholder && !value && (\r\n        <Placeholder\r\n          dangerouslySetInnerHTML={{ __html: placeholder }}\r\n        ></Placeholder>\r\n      )}\r\n\r\n      <Output dangerouslySetInnerHTML={{ __html: value }}></Output>\r\n      <Input\r\n        contentEditable={true}\r\n        onKeyDown={handleKeyDown}\r\n        onInput={(e) => handleChange(e)}\r\n      ></Input>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { motion } from 'framer-motion';\r\nimport { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { useRecoilState } from 'recoil';\r\nimport styled from 'styled-components';\r\n\r\nimport { postFileUpload } from 'api/file-upload';\r\nimport { fileObjectState } from 'atom/file-object-atoms';\r\n\r\nimport usePostWrite from './hook/use-post-write';\r\n\r\nimport Button from 'components/common/button';\r\nimport PostHeader from 'components/common/post-header';\r\nimport FileForm from 'components/file-form';\r\nimport Editor from './editor';\r\n\r\nconst Container = styled.div`\r\n  background-color: black;\r\n  color: rgb(245, 245, 245);\r\n  min-height: 100vh;\r\n`;\r\n\r\nconst Box = styled.div`\r\n  max-width: 500px;\r\n  width: 100%;\r\n  background-color: black;\r\n  position: fixed;\r\n  top: 0;\r\n  z-index: 20;\r\n`;\r\n\r\nconst Wrapper = styled(motion.div)`\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst StyledQuillWrapper = styled.div`\r\n  position: relative;\r\n  padding: 0 1rem;\r\n  padding-top: 1rem;\r\n  border: 1px solid rgb(38, 38, 38);\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst UploadBtn = styled(Button)<{ disabled: boolean }>`\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 15px;\r\n  width: 100px;\r\n\r\n  opacity: ${(props) => (props.disabled ? '0.5' : '1')};\r\n  cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\r\n`;\r\n\r\nconst WritePage = () => {\r\n  const [value, setValue] = useState('');\r\n  const [tags, setTags] = useState<string[]>([]);\r\n  const [fileObject, setFileObject] = useRecoilState(fileObjectState);\r\n\r\n  const { mutate: postWrite, isPending: isWriting } = usePostWrite();\r\n\r\n  const onSubmit = async () => {\r\n    if (fileObject.length === 0 || null) {\r\n      return toast.error('이미지를 하나 이상 업로드해주세요!');\r\n    } else {\r\n      const formData = new FormData();\r\n\r\n      fileObject.forEach((file, index) => {\r\n        formData.append(`files`, file);\r\n      });\r\n\r\n      const fileInfo = await postFileUpload({ formData });\r\n\r\n      if (fileInfo && fileInfo.length !== 0) {\r\n        postWrite({ value, fileInfo, tags });\r\n\r\n        setFileObject([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Box>\r\n        <PostHeader text={'게시물 작성'} />\r\n      </Box>\r\n\r\n      <Wrapper\r\n        initial={{ y: -100, opacity: 0 }}\r\n        animate={{ y: 0, opacity: 1 }}\r\n        transition={{ duration: 0.5 }}\r\n      >\r\n        <StyledQuillWrapper>\r\n          <Editor\r\n            placeholder={`당신의 공차를 공유하고 소개해주세요!<br/>(이미지를 하나 이상 업로드해주세요)`}\r\n            value={value}\r\n            setValue={setValue}\r\n            tags={tags}\r\n            setTags={setTags}\r\n          />\r\n\r\n          <FileForm />\r\n\r\n          <UploadBtn\r\n            type='submit'\r\n            onClick={onSubmit}\r\n            disabled={fileObject.length === 0}\r\n          >\r\n            {isWriting ? (\r\n              <img src='./spinner.svg' alt='loading' className='spinner' />\r\n            ) : (\r\n              '작성'\r\n            )}\r\n          </UploadBtn>\r\n        </StyledQuillWrapper>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","export const myPageKey = {\r\n  myPosts: 'myPosts',\r\n  myBookmark: 'myBookmark',\r\n};\r\n","export const postsKey = {\r\n  posts: 'posts',\r\n};\r\n\r\nexport const postDetailKey = {\r\n  post: 'post',\r\n  postLike: 'postLike',\r\n  postBookmark: 'postBookmark',\r\n};\r\n"],"names":["deleteFile","async","images","_ref","token","getToken","axios","put","headers","Authorization","concat","data","error","_error$response","console","log","response","status","toast","window","location","reload","postFileUpload","formData","_ref2","post","_error$response2","profileFileUpload","_ref3","_error$response3","fileObjectState","atom","key","default","Container","styled","div","_templateObject","_taggedTemplateLiteral","$direction","$justifyContent","$alignItems","_ref4","$wrap","_ref5","$gap","_ref6","$padding","_ref7","$background","_ref8","children","style","_jsx","profileimg","css","_templateObject2","_templateObject3","BackDrop","_templateObject4","Wrapper","_templateObject5","ContentWrapper","_templateObject6","Content","_templateObject7","Footer","_templateObject8","aspectRatio","onCrop","profileImg","inputRef","useRef","cropperRef","image","setImage","useState","_jsxs","_Fragment","type","ref","multiple","display","onChange","e","preventDefault","files","target","length","startsWith","warning","reader","FileReader","onload","result","readAsDataURL","onClick","value","handleChildrenClick","current","click","className","Cropper","initialAspectRatio","src","viewMode","width","height","background","responsive","autoCropArea","checkOrientation","guides","getCropData","_cropperRef$current","cropper","dataURL","getCroppedCanvas","toDataURL","Box","$pathname","IconBox","text","navigate","useNavigate","useLocation","pathname","FlexBox","IoChevronBackSharp","Typography","tag","fontWeight","fontSize","DynamicTypography","props","createElement","ImageBox","Image","img","CloseButton","motion","button","handleCompressImageDelete","selectedImage","setSelectedImage","swiperRef","useEffect","swiper","slideTo","Swiper","spaceBetween","slidesPerView","map","index","SwiperSlide","whileTap","scale","transition","duration","IoClose","alt","UploadButton","Img","Cover","deleteImages","oldImages","setDeleteImages","uploadImage","setUploadImage","uuId","setUuId","compressedImages","setCompressedImages","isLoading","isCompressLoading","compressImage","useImageCompress","fileObject","setFileObject","useRecoilState","handleImageDelete","updatedImages","updatedFileObject","Blob","deleteImgs","Array","isArray","push","splice","imageFile","dataURItoFile","compressedImage","prev","imageUrl","URL","createObjectURL","newImage","handleCompressImage","ImgSwiper","position","ImageCropper","uuid","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","blob","File","setIsLoading","size","options","maxSizeMB","maxWidthOrHeight","compressedFile","imageCompression","postWrite","fileInfo","tags","instance","content","usePostWrite","queryClient","useQueryClient","useMutation","mutationFn","mutationKey","onSuccess","invalidateQueries","queryKey","postsKey","posts","refetchType","myPageKey","myPosts","success","onError","Placeholder","Output","Input","placeholder","setValue","setTags","putAtCaret","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","el","document","innerHTML","frag","createDocumentFragment","node","lastNode","firstChild","appendChild","insertNode","newRange","cloneRange","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","dangerouslySetInnerHTML","__html","contentEditable","onKeyDown","keyCode","onInput","hashTags","currentTarget","innerText","match","str","replace","handleChange","StyledQuillWrapper","UploadBtn","Button","disabled","WritePage","mutate","isPending","isWriting","PostHeader","initial","y","opacity","animate","Editor","FileForm","FormData","forEach","file","append","myBookmark","postDetailKey","postLike","postBookmark"],"sourceRoot":""}