{"version":3,"file":"static/js/734.03defaf1.chunk.js","mappings":"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","sources":["components/not-found.tsx","pages/post-detail/hook/use-fetch-post-bookmark.tsx","pages/post-detail/hook/use-fetch-post-like.tsx","pages/post-detail/hook/use-post-bookmark.tsx","pages/post-detail/hook/use-delete-post.tsx","pages/post-detail/post-detail-contents/post-share.tsx","components/common/modal/various-modal.tsx","pages/post-detail/hook/use-post-like-post.tsx","pages/post-detail/post-detail-images/images.tsx","pages/post-detail/post-detail-images/index.tsx","pages/post-detail/post-detail-like/index.tsx","pages/post-detail/post-detail-contents/post-detail-contents-mobile/index.tsx","pages/post-detail/post-detail-contents/post-detail-contents-pc/index.tsx","pages/post-detail/index.tsx","react-query-key/my-page-keys.ts"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst NotFoundContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  flex-direction: column;\r\n  background-color: black;\r\n  color: rgb(245, 245, 245);\r\n  white-space: pre-line;\r\n`;\r\n\r\nconst Text = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .longshadow {\r\n    font-size: 12rem;\r\n    color: #131313;\r\n    color: gray;\r\n    text-shadow: 4px 4px 0px #131313, 8px 8px 0px #131313, 12px 12px 0px #131313;\r\n    text-shadow: 4px 4px 0px gray, 8px 8px 0px gray, 12px 12px 0px gray;\r\n  }\r\n\r\n  .o {\r\n    color: tomato;\r\n    text-shadow: 4px 4px 0px tomato, 8px 8px 0px tomato, 12px 12px 0px tomato;\r\n    text-shadow: 4px 4px 0px tomato, 8px 8px 0px tomato, 12px 12px 0px gray;\r\n  }\r\n`;\r\n\r\nconst GoBack = styled.div`\r\n  color: rgb(224, 241, 255);\r\n  transition: all 0.3s ease;\r\n  margin-top: 10rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: rgb(179, 219, 255);\r\n  }\r\n`;\r\n\r\ninterface INotFound {\r\n  text?: string;\r\n}\r\n\r\nconst NotFound = ({ text }: INotFound) => {\r\n  const navigate = useNavigate();\r\n\r\n  const goBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  return (\r\n    <NotFoundContainer>\r\n      {!text ? (\r\n        <>\r\n          <Text>\r\n            <span className='longshadow'>\r\n              4<span className='o'>0</span>4\r\n            </span>\r\n            <span>페이지를 찾을 수 없습니다..</span>\r\n          </Text>\r\n\r\n          <GoBack onClick={goBack}>Go back</GoBack>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Text>{text}</Text>\r\n        </>\r\n      )}\r\n    </NotFoundContainer>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { useQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { postDetailKey } from 'react-query-key/post.keys';\r\n\r\nconst fetchPostBookmark = async (postId: string) => {\r\n  const res = await instance.get<boolean>(`/api/posts/bookmark/${postId}`);\r\n  return res.data;\r\n};\r\n\r\nconst useFetchPostBookmark = (postId: string) => {\r\n  const { data, isLoading, error } = useQuery({\r\n    queryKey: [postDetailKey.postBookmark, postId],\r\n    queryFn: () => fetchPostBookmark(postId),\r\n    refetchOnWindowFocus: false,\r\n    staleTime: 15000,\r\n  });\r\n\r\n  return { data, isLoading, error };\r\n};\r\n\r\nexport default useFetchPostBookmark;\r\n","import { useQuery } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { useEffect } from 'react';\r\nimport { postDetailKey } from 'react-query-key/post.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst fetchPostLike = async (postId: string) => {\r\n  const res = await instance.get<boolean>(`/api/posts/like/${postId}`);\r\n  return res.data;\r\n};\r\n\r\nconst useFetchPostLike = (postId: string) => {\r\n  const { data, isLoading, error } = useQuery({\r\n    queryKey: [postDetailKey.postLike, postId],\r\n    queryFn: () => fetchPostLike(postId),\r\n    refetchOnWindowFocus: false,\r\n    staleTime: 15000,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error('게시글을 불러오는데 실패했습니다.');\r\n    }\r\n  }, [error]);\r\n\r\n  return { data, isLoading, error };\r\n};\r\n\r\nexport default useFetchPostLike;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { IUserInfo } from 'interface/auth';\r\nimport { myPageKey } from 'react-query-key/my-page-keys';\r\nimport { postDetailKey } from 'react-query-key/post.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IPostBookmark {\r\n  postId: string;\r\n}\r\n\r\ninterface ICustomResponse<T, U> {\r\n  data: T;\r\n  msg?: U;\r\n}\r\nconst postBookmark = async ({ postId }: IPostBookmark) => {\r\n  const res: ICustomResponse<string, any> = await instance.put<string>(\r\n    `/api/posts/bookmark/${postId}`\r\n  );\r\n\r\n  if (res.msg === '리프레시 토큰 만료됨') {\r\n    toast.error('로그인 기한이 만료되었습니다. 다시 로그인 해주세요!');\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1200);\r\n  }\r\n\r\n  return res.data;\r\n};\r\n\r\n// 게시글 좋아요 뮤테이션\r\nconst usePostBookmark = (\r\n  postId: string,\r\n  user: IUserInfo | null | undefined\r\n) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postBookmark,\r\n    mutationKey: ['post-bookmark'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postDetailKey.post, postId],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postDetailKey.postBookmark],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.invalidateQueries({\r\n        queryKey: [myPageKey.myBookmark],\r\n        refetchType: 'all',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('다시 시도해주세요');\r\n      if (error?.response?.status === 401) {\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 1200);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostBookmark;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { postsKey } from 'react-query-key/post.keys';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IDeletePostProps {\r\n  postId: string;\r\n}\r\n\r\ninterface ICustomResponse<T, U> {\r\n  data: T;\r\n  msg?: U;\r\n}\r\nconst deletePost = async ({ postId }: IDeletePostProps) => {\r\n  const res: ICustomResponse<string, any> = await instance.delete<string>(\r\n    `/api/posts/${postId}`\r\n  );\r\n\r\n  if (res.msg === '리프레시 토큰 만료됨') {\r\n    toast.error('로그인 기한이 만료되었습니다. 다시 로그인 해주세요!');\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1200);\r\n  }\r\n\r\n  return res.data;\r\n};\r\n\r\nconst useDeletePost = () => {\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: deletePost,\r\n    mutationKey: ['post-delete'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postsKey.posts],\r\n        refetchType: 'all',\r\n      });\r\n      navigate(-1);\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('다시 시도해주세요');\r\n      if (error?.response?.status === 401) {\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 1200);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default useDeletePost;\r\n","import { PostsDataType } from 'interface/posts';\r\nimport { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from 'components/common/button';\r\n\r\nconst StyledButton = styled(Button)`\r\n  font-weight: 700;\r\n  background-color: rgb(38, 38, 38);\r\n  width: 250px;\r\n  min-height: 48px;\r\n  padding: 4px 8px;\r\n  border-bottom: 1px solid rgb(54, 54, 54);\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: rgb(29, 29, 29);\r\n  }\r\n`;\r\n\r\ndeclare global {\r\n  interface Window {\r\n    Kakao: any;\r\n  }\r\n}\r\n\r\nconst { Kakao } = window;\r\n\r\ninterface IPostShareProps {\r\n  post: PostsDataType | undefined;\r\n}\r\n\r\nconst PostShare = ({ post }: IPostShareProps) => {\r\n  const shareKakao = () => {\r\n    if (post) {\r\n      Kakao.Share.sendCustom({\r\n        templateId: 107624,\r\n        templateArgs: {\r\n          post_id: `post/${post?._id}`,\r\n          avatar: `${post?.author?.avatar}`,\r\n          nickname: `${post?.author?.nickname}`,\r\n          postImg: `${post?.images[0]}`,\r\n          contents: `${\r\n            post?.contents\r\n              ? post?.contents.replace(/<[^>]*>?/gm, '')\r\n              : '#공차 #하이!'\r\n          }`,\r\n          like: `${post?.postLikeCount}`,\r\n          commentCount: `${post?.postCommentCount}`,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (window.Kakao) {\r\n      window.Kakao.cleanup();\r\n\r\n      window.Kakao.init(process.env.REACT_APP_API_KAKAO_SHARE_KEY);\r\n      // 잘 적용되면 true를 리턴함\r\n      //   console.log(window.Kakao.isInitialized());\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <StyledButton\r\n      type='button'\r\n      onClick={() => {\r\n        shareKakao();\r\n      }}\r\n    >\r\n      공유하기\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default PostShare;\r\n","import { useCallback, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nimport { PostsDataType } from 'interface/posts';\r\n\r\nimport { useUser } from 'hook/auth/use-user';\r\n\r\nimport useDeletePost from 'pages/post-detail/hook/use-delete-post';\r\nimport PostShare from 'pages/post-detail/post-detail-contents/post-share';\r\nimport Button from '../button';\r\nimport ConfirmModal from './confirm-modal';\r\n\r\nconst fadeInAnimation = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n    scale: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n    scale: 1.1;\r\n  }\r\n  100%{\r\n    scale: 1;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  color: #fff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 30;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  animation: ${fadeInAnimation} 0.3s ease-in-out;\r\n`;\r\n\r\nconst StyledButton = styled(Button)<{ $danger?: string; $last?: string }>`\r\n  font-weight: 700;\r\n  background-color: rgb(38, 38, 38);\r\n  width: 250px;\r\n  min-height: 48px;\r\n  padding: 4px 8px;\r\n  border-bottom: 1px solid rgb(54, 54, 54);\r\n  transition: all 0.3s ease;\r\n  border-bottom-left-radius: ${({ $last }) => ($last ? '12px' : '0px')};\r\n  border-bottom-right-radius: ${({ $last }) => ($last ? '12px' : '0px')};\r\n  color: ${({ $danger }) => ($danger ? 'rgb(237, 73, 86)' : '#fff')};\r\n\r\n  &:first-child {\r\n    border-top-left-radius: 12px;\r\n    border-top-right-radius: 12px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: rgb(29, 29, 29);\r\n  }\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  background-color: rgb(38, 38, 38);\r\n  border-bottom-left-radius: 0px;\r\n  border-bottom-right-radius: 0px;\r\n`;\r\n\r\ninterface IVariousModalProps {\r\n  text: string;\r\n  text2: string;\r\n  post: PostsDataType | undefined;\r\n  handleConfirm?: () => void;\r\n  handleCancel: () => void;\r\n}\r\n\r\nconst VariousModal = ({\r\n  text,\r\n  text2,\r\n  post,\r\n  handleConfirm,\r\n  handleCancel,\r\n}: IVariousModalProps) => {\r\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\r\n\r\n  const { user } = useUser();\r\n  const { mutate: deletePost } = useDeletePost();\r\n\r\n  // 게시글 삭제\r\n  const handlePostDelete = useCallback(() => {\r\n    if (post) {\r\n      deletePost({ postId: post._id });\r\n      setIsConfirmModalOpen(false);\r\n      handleCancel();\r\n    }\r\n  }, [post]);\r\n\r\n  return (\r\n    <>\r\n      {isConfirmModalOpen && (\r\n        <ConfirmModal\r\n          text='정말 삭제하시겠습니까? (예)'\r\n          handleConfirm={() => {\r\n            handlePostDelete();\r\n          }}\r\n          handleCancel={() => setIsConfirmModalOpen(false)}\r\n        />\r\n      )}\r\n\r\n      <Container>\r\n        <Wrapper>\r\n          {user?._id === post?.author?._id && user && (\r\n            <>\r\n              <StyledButton\r\n                type='button'\r\n                onClick={() => setIsConfirmModalOpen(true)}\r\n                $danger='true'\r\n              >\r\n                {text}\r\n              </StyledButton>\r\n\r\n              <SLink to={`/post/edit/${post?._id}`}>\r\n                <StyledButton type='button'>{text2}</StyledButton>\r\n              </SLink>\r\n            </>\r\n          )}\r\n\r\n          {/* 공유하기 버튼 */}\r\n          <PostShare post={post} />\r\n\r\n          <StyledButton type='button' onClick={handleCancel} $last={'true'}>\r\n            취소\r\n          </StyledButton>\r\n        </Wrapper>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VariousModal;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { IUserInfo } from 'interface/auth';\r\nimport { postDetailKey } from 'react-query-key/post.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IPostLikeProps {\r\n  postId: string;\r\n}\r\n\r\ninterface ICustomResponse<T, U> {\r\n  data: T;\r\n  msg?: U;\r\n}\r\nconst postLikePost = async ({ postId }: IPostLikeProps) => {\r\n  const res: ICustomResponse<string, any> = await instance.put<string>(\r\n    `/api/posts/like/${postId}`\r\n  );\r\n\r\n  if (res.msg === '리프레시 토큰 만료됨') {\r\n    toast.error('로그인 기한이 만료되었습니다. 다시 로그인 해주세요!');\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1200);\r\n  }\r\n\r\n  return res.data;\r\n};\r\n\r\n// 게시글 좋아요 뮤테이션\r\nconst usePostLikePost = (\r\n  postId: string,\r\n  user: IUserInfo | null | undefined\r\n) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postLikePost,\r\n    mutationKey: ['post-like'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postDetailKey.post, postId],\r\n        refetchType: 'all',\r\n      });\r\n      queryClient.invalidateQueries({\r\n        queryKey: [postDetailKey.postLike],\r\n        refetchType: 'all',\r\n      });\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('다시 시도해주세요');\r\n      if (error?.response?.status === 401) {\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 1200);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostLikePost;\r\n","import { useState } from 'react';\r\nimport { GrFormNext, GrFormPrevious } from 'react-icons/gr';\r\nimport styled from 'styled-components';\r\nimport { A11y, Navigation, Pagination, Scrollbar } from 'swiper/modules';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n\r\nimport 'swiper/css';\r\nimport 'swiper/css/navigation';\r\nimport 'swiper/css/pagination';\r\nimport 'swiper/css/scrollbar';\r\nimport { Swiper as SwiperType } from 'swiper/types';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst ImageBox = styled.div`\r\n  aspect-ratio: auto 3/4;\r\n  background-color: black;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst BtnWrap = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 12px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 20;\r\n\r\n  button {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 16px 8px;\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: #beb3b3;\r\n    background-color: rgb(245, 245, 245);\r\n    border-radius: 50%;\r\n  }\r\n\r\n  @media (max-width: 375px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\ninterface IimagesProps {\r\n  images: string[] | undefined;\r\n}\r\n\r\nconst Images = ({ images }: IimagesProps) => {\r\n  const [swiperRef, setSwiperRef] = useState<SwiperType>();\r\n\r\n  const prevHandler = () => {\r\n    swiperRef && swiperRef.slidePrev();\r\n  };\r\n\r\n  const nextHandler = () => {\r\n    swiperRef && swiperRef.slideNext();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <BtnWrap>\r\n        <button onClick={prevHandler} className='prev-btn'>\r\n          <GrFormPrevious />\r\n        </button>\r\n        <button onClick={nextHandler} className='next-btn'>\r\n          <GrFormNext />\r\n        </button>\r\n      </BtnWrap>\r\n      <Swiper\r\n        spaceBetween={0}\r\n        slidesPerView={1}\r\n        modules={[Navigation, Pagination, Scrollbar, A11y]}\r\n        // navigation\r\n        pagination={{ clickable: true }}\r\n        onSwiper={(swiper: SwiperType) => setSwiperRef(swiper)}\r\n      >\r\n        {images?.map((img, index) => (\r\n          <SwiperSlide key={index}>\r\n            <ImageBox>\r\n              <Image src={img} alt='img' />\r\n            </ImageBox>\r\n          </SwiperSlide>\r\n        ))}\r\n      </Swiper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Images;\r\n","import styled from 'styled-components';\r\nimport Images from './images';\r\n\r\nconst ImageBox = styled.div`\r\n  aspect-ratio: auto 3/4;\r\n  background-color: black;\r\n  max-height: 100%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\ninterface IPostDetailImagesProps {\r\n  postLoading: boolean;\r\n  url: string[] | undefined;\r\n}\r\n\r\nconst PostDetailImages = ({ url, postLoading }: IPostDetailImagesProps) => {\r\n  return (\r\n    <ImageBox>\r\n      {postLoading ? (\r\n        ''\r\n      ) : url?.length === 1 ? (\r\n        <Image src={url[0]} alt='post-img' />\r\n      ) : (\r\n        <Images images={url} />\r\n      )}\r\n    </ImageBox>\r\n  );\r\n};\r\n\r\nexport default PostDetailImages;\r\n","import { motion } from 'framer-motion';\r\nimport { FcLike } from 'react-icons/fc';\r\nimport { SlHeart } from 'react-icons/sl';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled(motion.div)`\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface IPostDetailLikeProps {\r\n  handlePostLike: () => void;\r\n  isPostLike: boolean | undefined;\r\n}\r\n\r\nconst PostDetailLike = ({\r\n  handlePostLike,\r\n  isPostLike,\r\n}: IPostDetailLikeProps) => {\r\n  return (\r\n    <Container\r\n      onClick={handlePostLike}\r\n      whileTap={{ scale: 0.9 }}\r\n      transition={{ duration: 0.2 }}\r\n    >\r\n      {isPostLike ? (\r\n        <FcLike style={{ fontSize: 24 }} />\r\n      ) : (\r\n        <SlHeart style={{ fontSize: 24 }} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PostDetailLike;\r\n","import { InfiniteData } from '@tanstack/react-query';\r\nimport { formatDistance } from 'date-fns';\r\nimport { ko } from 'date-fns/locale/ko';\r\nimport { IUserInfo } from 'interface/auth';\r\nimport { ICommentResponse } from 'interface/comment';\r\nimport { PostsDataType } from 'interface/posts';\r\nimport { useState } from 'react';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport { CiBookmark } from 'react-icons/ci';\r\nimport { FaBookmark } from 'react-icons/fa6';\r\nimport { IoChatbubbleOutline } from 'react-icons/io5';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport styled from 'styled-components';\r\n\r\nimport { commentFormStatus } from 'atom/comment-atoms';\r\nimport usePostBookmark from 'pages/post-detail/hook/use-post-bookmark';\r\n\r\nimport CommentSkeleton from 'components/comments/comment-skeleton';\r\nimport FlexBox from 'components/common/flex-box';\r\nimport VariousModal from 'components/common/modal/various-modal';\r\nimport PostHeader from 'components/common/post-header';\r\nimport usePostLikePost from 'pages/post-detail/hook/use-post-like-post';\r\nimport PostDetailImages from 'pages/post-detail/post-detail-images';\r\nimport PostDetailLike from 'pages/post-detail/post-detail-like';\r\n\r\nconst Container = styled.div`\r\n  min-width: 335px;\r\n  width: 100%;\r\n  background-color: black;\r\n`;\r\n\r\nconst User = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.5rem 1rem;\r\n  padding-top: 3.5rem;\r\n\r\n  .user-nickname {\r\n    font-size: 14px;\r\n    line-height: 18px;\r\n    font-weight: 600;\r\n  }\r\n\r\n  .user-image {\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n    object-fit: cover;\r\n    flex-shrink: 0;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nconst ContentsWrap = styled.ul`\r\n  height: calc(100% - 200px);\r\n  margin: 0;\r\n  overflow-y: scroll;\r\n  padding: 16px;\r\n  scrollbar-width: none;\r\n  background-color: black;\r\n\r\n  @media (max-width: 768px) {\r\n    height: 150px;\r\n    padding-top: 0;\r\n    overflow-y: initial;\r\n  }\r\n`;\r\n\r\nconst ContentsItem = styled.li`\r\n  display: flex;\r\n  align-items: start;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Post = styled.div`\r\n  width: 100%;\r\n  max-width: 335px;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  gap: 5px;\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: 100%;\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nconst Section = styled.section`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 23px;\r\n  color: rgb(245, 245, 245);\r\n  width: 100%;\r\n  padding: 0.2rem 0;\r\n  .bookmark {\r\n    margin-left: auto;\r\n  }\r\n\r\n  .section-icons {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Bottom = styled.div`\r\n  color: rgb(168, 168, 168);\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  margin-left: auto;\r\n`;\r\n\r\ninterface IPostDetailContents {\r\n  post: PostsDataType | undefined;\r\n  commentListResponse: InfiniteData<ICommentResponse, unknown> | undefined;\r\n  commentListLoading: boolean;\r\n  postLoading: boolean;\r\n  user: IUserInfo | null | undefined;\r\n  isPostLike: boolean | undefined;\r\n  isBookmark: boolean | undefined;\r\n}\r\n\r\nconst PostDetailContentsMobile = ({\r\n  user,\r\n  post,\r\n  commentListResponse,\r\n  commentListLoading,\r\n  postLoading,\r\n  isPostLike,\r\n  isBookmark,\r\n}: IPostDetailContents) => {\r\n  const [isVariousModalOpen, setIsVariousModalOpen] = useState(false);\r\n  const setCommentFormStatus = useSetRecoilState(commentFormStatus);\r\n\r\n  const { mutate: updateLike } = usePostLikePost(post?._id as string, user);\r\n  const { mutate: updateBookmark } = usePostBookmark(post?._id as string, user);\r\n\r\n  const handlePostLike = () => {\r\n    if (!user) {\r\n      toast.warning('로그인이 필요한 서비스입니다.');\r\n    } else {\r\n      updateLike({ postId: post?._id as string });\r\n    }\r\n  };\r\n\r\n  const handlePostBookmark = () => {\r\n    if (!user) {\r\n      toast.warning('로그인이 필요한 서비스입니다.');\r\n    } else {\r\n      updateBookmark({ postId: post?._id as string });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {isVariousModalOpen && (\r\n        <VariousModal\r\n          text='삭제하기'\r\n          text2='수정하기'\r\n          post={post}\r\n          handleCancel={() => setIsVariousModalOpen(false)}\r\n        />\r\n      )}\r\n\r\n      <Container>\r\n        <PostHeader text='게시물' />\r\n        <User>\r\n          {postLoading ? (\r\n            <CommentSkeleton />\r\n          ) : (\r\n            <>\r\n              <img\r\n                className='user-image'\r\n                src={post?.author?.avatar}\r\n                alt='userImage'\r\n              />\r\n\r\n              <div className='user-nickname'>{post?.author?.nickname}</div>\r\n\r\n              <Icon onClick={() => setIsVariousModalOpen(true)}>\r\n                <BsThreeDots />\r\n              </Icon>\r\n            </>\r\n          )}\r\n        </User>\r\n\r\n        {/* 게시글 이미지 */}\r\n        <PostDetailImages url={post?.images} postLoading={postLoading} />\r\n\r\n        <ContentsWrap>\r\n          <ContentsItem>\r\n            <Section>\r\n              {/* 게시글 좋아요 */}\r\n              <PostDetailLike\r\n                handlePostLike={handlePostLike}\r\n                isPostLike={isPostLike}\r\n              />\r\n\r\n              <Link\r\n                to={`/${post?._id}/commentList`}\r\n                onClick={() => setCommentFormStatus(true)}\r\n              >\r\n                <div className='section-icons'>\r\n                  <IoChatbubbleOutline />\r\n                </div>\r\n              </Link>\r\n\r\n              <div\r\n                className='bookmark section-icons'\r\n                onClick={handlePostBookmark}\r\n              >\r\n                {isBookmark ? <FaBookmark /> : <CiBookmark />}\r\n              </div>\r\n            </Section>\r\n\r\n            <Post>\r\n              <b>\r\n                좋아요{' '}\r\n                {new Intl.NumberFormat('ko-KR').format(\r\n                  (post?.postLikeCount as number) || 0\r\n                )}\r\n                개\r\n              </b>\r\n              <br />\r\n              <FlexBox>\r\n                <span>\r\n                  <b>{post?.author?.nickname} </b>\r\n                  <span\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post?.contents || '',\r\n                    }}\r\n                  ></span>\r\n                </span>\r\n              </FlexBox>\r\n            </Post>\r\n          </ContentsItem>\r\n\r\n          <Link to={`/${post?._id}/commentList`}>\r\n            <Bottom>\r\n              댓글 {commentListResponse?.pages[0].totalCount}개 모두 보기\r\n            </Bottom>\r\n          </Link>\r\n          <Bottom>\r\n            {post &&\r\n              formatDistance(new Date(), new Date(post.date), {\r\n                locale: ko as any,\r\n              })}\r\n            전\r\n          </Bottom>\r\n        </ContentsWrap>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostDetailContentsMobile;\r\n","import { InfiniteData } from '@tanstack/react-query';\r\nimport { formatDistance } from 'date-fns';\r\nimport ko from 'date-fns/locale/ko';\r\nimport { IUserInfo } from 'interface/auth';\r\nimport { ICommentResponse } from 'interface/comment';\r\nimport { PostsDataType } from 'interface/posts';\r\nimport { toast } from 'react-toastify';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport styled from 'styled-components';\r\n\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport { CiBookmark } from 'react-icons/ci';\r\nimport { FaBookmark } from 'react-icons/fa6';\r\nimport { IoChatbubbleOutline } from 'react-icons/io5';\r\nimport { LuPlusCircle } from 'react-icons/lu';\r\n\r\nimport { commentFormStatus } from 'atom/comment-atoms';\r\nimport usePostBookmark from 'pages/post-detail/hook/use-post-bookmark';\r\nimport usePostLikePost from 'pages/post-detail/hook/use-post-like-post';\r\n\r\nimport CommentForm from 'components/comments/comment-form';\r\nimport CommentList from 'components/comments/comment-list';\r\nimport CommentSkeleton from 'components/comments/comment-skeleton';\r\nimport FlexBox from 'components/common/flex-box';\r\nimport VariousModal from 'components/common/modal/various-modal';\r\nimport Typography from 'components/common/typography';\r\nimport PostDetailImages from 'pages/post-detail/post-detail-images';\r\nimport PostDetailLike from 'pages/post-detail/post-detail-like';\r\nimport { useState } from 'react';\r\n\r\nconst Container = styled.div`\r\n  min-width: 335px;\r\n  background-color: black;\r\n`;\r\n\r\nconst User = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.5rem 1rem;\r\n  border-bottom: 1px solid rgb(38, 38, 38);\r\n\r\n  .user-nickname {\r\n    font-size: 14px;\r\n    line-height: 18px;\r\n    font-weight: 600;\r\n  }\r\n\r\n  .user-image {\r\n    width: 35px;\r\n    height: 35px;\r\n    border-radius: 50%;\r\n    object-fit: cover;\r\n    flex-shrink: 0;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\nconst ContentsWrap = styled.ul`\r\n  height: calc(100% - 200px);\r\n  margin: 0;\r\n  overflow-y: scroll;\r\n  padding: 16px;\r\n  scrollbar-width: none;\r\n`;\r\n\r\nconst ContentsItem = styled.li`\r\n  display: flex;\r\n  align-items: start;\r\n`;\r\n\r\nconst UserImage = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  flex-shrink: 0;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Post = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 335px;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid rgb(38, 38, 38);\r\n  padding-top: 6px;\r\n  span {\r\n    cursor: pointer;\r\n    padding-top: 6px;\r\n    font-size: 14px;\r\n    color: rgb(245, 245, 245);\r\n    line-height: 18px;\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nconst Section = styled.section`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 23px;\r\n  color: rgb(245, 245, 245);\r\n\r\n  .bookmark {\r\n    margin-left: auto;\r\n  }\r\n\r\n  .section-icons {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Box = styled.div`\r\n  padding: 0 16px;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  margin-left: auto;\r\n`;\r\n\r\nconst Time = styled.div`\r\n  color: rgb(168, 168, 168);\r\n  font-size: 12px;\r\n`;\r\n\r\ninterface IPostDetailContents {\r\n  post: PostsDataType | undefined;\r\n  commentListResponse: InfiniteData<ICommentResponse, unknown> | undefined;\r\n  commentListLoading: boolean;\r\n  postLoading: boolean;\r\n  hasNextPage: boolean;\r\n  isFetchingNextPage: boolean;\r\n  fetchNext: () => Promise<void>;\r\n  user: IUserInfo | null | undefined;\r\n  isPostLike: boolean | undefined;\r\n  isBookmark: boolean | undefined;\r\n}\r\n\r\nconst skeletons = Array(12).fill(0);\r\n\r\nconst PostDetailContentsPC = ({\r\n  user,\r\n  post,\r\n  commentListResponse,\r\n  commentListLoading,\r\n  postLoading,\r\n  fetchNext,\r\n  hasNextPage,\r\n  isFetchingNextPage,\r\n  isPostLike,\r\n  isBookmark,\r\n}: IPostDetailContents) => {\r\n  const [isVariousModalOpen, setIsVariousModalOpen] = useState(false);\r\n\r\n  const setCommentFormStatus = useSetRecoilState(commentFormStatus);\r\n\r\n  const { mutate: updateLike } = usePostLikePost(post?._id as string, user);\r\n  const { mutate: updateBookmark } = usePostBookmark(post?._id as string, user);\r\n\r\n  const handlePostLike = () => {\r\n    if (!user) {\r\n      toast.warning('로그인이 필요한 서비스입니다.');\r\n    } else {\r\n      updateLike({ postId: post?._id as string });\r\n    }\r\n  };\r\n\r\n  const handlePostBookmark = () => {\r\n    if (!user) {\r\n      toast.warning('로그인이 필요한 서비스입니다.');\r\n    } else {\r\n      updateBookmark({ postId: post?._id as string });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isVariousModalOpen && (\r\n        <VariousModal\r\n          text='삭제하기'\r\n          text2='수정하기'\r\n          post={post}\r\n          handleCancel={() => setIsVariousModalOpen(false)}\r\n        />\r\n      )}\r\n\r\n      <PostDetailImages postLoading={postLoading} url={post?.images} />\r\n      <Container>\r\n        {postLoading ? (\r\n          <CommentSkeleton />\r\n        ) : (\r\n          <User>\r\n            <UserImage src={post?.author?.avatar} alt='userImage' />\r\n\r\n            <div className='user-nickname'>{post?.author?.nickname}</div>\r\n\r\n            <Icon onClick={() => setIsVariousModalOpen(true)}>\r\n              <BsThreeDots />\r\n            </Icon>\r\n          </User>\r\n        )}\r\n\r\n        <ContentsWrap>\r\n          {postLoading ? (\r\n            <CommentSkeleton />\r\n          ) : (\r\n            <ContentsItem>\r\n              <UserImage src={post?.author?.avatar} alt='userImage' />\r\n\r\n              <Post>\r\n                <span>\r\n                  <b>{post?.author?.nickname} </b>\r\n                  <span\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post?.contents || '',\r\n                    }}\r\n                  ></span>\r\n                </span>\r\n              </Post>\r\n            </ContentsItem>\r\n          )}\r\n\r\n          <FlexBox $direction='column' style={{ height: '100%' }}>\r\n            {commentListLoading ? (\r\n              <>\r\n                {skeletons.map((_, index) => (\r\n                  <div key={index}>\r\n                    <CommentSkeleton />\r\n                  </div>\r\n                ))}\r\n              </>\r\n            ) : (\r\n              // 댓글 리스트\r\n              <>\r\n                {commentListResponse?.pages?.map((data, index) =>\r\n                  data?.commentList?.length !== 0 ? (\r\n                    data.commentList.map((comment) => (\r\n                      <CommentList\r\n                        postId={post?._id}\r\n                        comment={comment}\r\n                        key={comment._id}\r\n                      />\r\n                    ))\r\n                  ) : (\r\n                    <FlexBox\r\n                      style={{ height: '100%' }}\r\n                      $justifyContent='center'\r\n                      $alignItems='center'\r\n                      $direction='column'\r\n                      key={index}\r\n                    >\r\n                      <Typography tag='h3'>아직 댓글이 없습니다.</Typography>\r\n                      <Typography tag='h5'>댓글을 남겨보세요.</Typography>\r\n                    </FlexBox>\r\n                  )\r\n                )}\r\n\r\n                {/* 더보기 버튼 눌렀을 시 로딩 */}\r\n                {isFetchingNextPage ? (\r\n                  <img src='/spinner.svg' alt='loading' className='spinner' />\r\n                ) : (\r\n                  // 더보기 버튼\r\n                  <>\r\n                    {hasNextPage && (\r\n                      <div onClick={() => fetchNext()}>\r\n                        <FlexBox\r\n                          $justifyContent='center'\r\n                          $alignItems='center'\r\n                          style={{\r\n                            minHeight: '40px',\r\n                            fontSize: '20px',\r\n                            marginTop: '10px',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                        >\r\n                          <LuPlusCircle />\r\n                        </FlexBox>\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </FlexBox>\r\n        </ContentsWrap>\r\n\r\n        <Footer>\r\n          <Box>\r\n            <Section>\r\n              {/* 게시글 좋아요 */}\r\n              <PostDetailLike\r\n                handlePostLike={handlePostLike}\r\n                isPostLike={isPostLike}\r\n              />\r\n\r\n              <div\r\n                className='section-icons'\r\n                onClick={() => setCommentFormStatus(true)}\r\n              >\r\n                <IoChatbubbleOutline />\r\n              </div>\r\n\r\n              {/* 게시글 북마크 */}\r\n              <div\r\n                className='bookmark section-icons'\r\n                onClick={handlePostBookmark}\r\n              >\r\n                {isBookmark ? <FaBookmark /> : <CiBookmark />}\r\n              </div>\r\n            </Section>\r\n            <span>\r\n              좋아요{' '}\r\n              {new Intl.NumberFormat('ko-KR').format(\r\n                (post?.postLikeCount as number) || 0\r\n              )}\r\n              개\r\n            </span>{' '}\r\n            <br />\r\n            <Time>\r\n              {post &&\r\n                formatDistance(new Date(), new Date(post.date), {\r\n                  locale: ko as any,\r\n                })}\r\n              전\r\n            </Time>\r\n          </Box>\r\n          {/* 댓글 작성 폼 */}\r\n          <CommentForm post={post} />\r\n        </Footer>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostDetailContentsPC;\r\n","import { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { IoMdClose } from 'react-icons/io';\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nimport { useUser } from 'hook/auth/use-user';\r\nimport useFetchPostBookmark from 'pages/post-detail/hook/use-fetch-post-bookmark';\r\nimport useFetchPostDetail from 'pages/post-detail/hook/use-fetch-post-detail';\r\nimport useFetchPostLike from 'pages/post-detail/hook/use-fetch-post-like';\r\nimport useFetchCommentList from '../../hook/comments/use-fetch-comment-list';\r\n\r\nimport FlexBox from 'components/common/flex-box';\r\nimport NotFound from 'components/not-found';\r\nimport PostDetailContentsMobile from './post-detail-contents/post-detail-contents-mobile';\r\nimport PostDetailContentsPC from './post-detail-contents/post-detail-contents-pc';\r\n\r\nconst fadeInAnimation = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n    scale: 0;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n    scale: 1.1;\r\n  }\r\n  100%{\r\n    scale: 1;\r\n  }\r\n  `;\r\n\r\nconst EntireArea = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-color: black;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  color: #fff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 20;\r\n  overflow: hidden;\r\n  animation: ${fadeInAnimation} 0.3s ease-in-out;\r\n\r\n  @media (max-width: 768px) {\r\n    align-items: start;\r\n    overflow-y: scroll;\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div<{ $boxheight: number }>`\r\n  max-width: calc(100% - 64px - 64px);\r\n  max-height: calc(100vh - 150px);\r\n  height: ${({ $boxheight }) => `${$boxheight}px`};\r\n  transition: all 0.3s ease;\r\n  border: 1px solid rgb(38, 38, 38);\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: initial;\r\n    max-height: initial;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst Close = styled.div`\r\n  position: absolute;\r\n  right: 30px;\r\n  font-size: 2rem;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst PostDetailPage = () => {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\r\n  const [boxHeight, setBoxHeight] = useState(window.innerWidth / 1.5);\r\n\r\n  const { user } = useUser();\r\n\r\n  const {\r\n    data: post,\r\n    isLoading: postLoading,\r\n    error,\r\n  } = useFetchPostDetail(params.id as string);\r\n  const { data: isPostLike } = useFetchPostLike(params.id as string);\r\n  const { data: isBookmark } = useFetchPostBookmark(params.id as string);\r\n  const {\r\n    data: commentListResponse,\r\n    isLoading: commentListLoading,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isFetchingNextPage,\r\n  } = useFetchCommentList(params.id as string);\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n\r\n  const fetchNext = useCallback(async () => {\r\n    const res = await fetchNextPage();\r\n\r\n    if (res.isError) {\r\n      console.log(res.error);\r\n    }\r\n  }, [fetchNextPage]);\r\n\r\n  const handleClose = () => {\r\n    if (location.key === 'default') {\r\n      navigate('/posts');\r\n    } else {\r\n      navigate(-1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 모달이 열릴 때 배경 스크롤 비활성화\r\n    document.body.style.overflow = 'hidden';\r\n\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      if (e.keyCode === 27) {\r\n        navigate(-1);\r\n      }\r\n    };\r\n    const handleOutsideClose = (e: MouseEvent) => {\r\n      if (divRef.current && !divRef.current.contains(e.target as Node)) {\r\n        navigate(-1);\r\n      }\r\n    };\r\n\r\n    const handleResize = () => {\r\n      if (window.innerWidth <= 768) {\r\n        setIsMobile(true);\r\n      } else {\r\n        setBoxHeight(window.innerWidth / 1.875);\r\n        setIsMobile(false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    document.addEventListener('mousedown', handleOutsideClose);\r\n    document.addEventListener('keydown', handleKeyPress);\r\n\r\n    return () => {\r\n      // 모달이 닫힐 때 body에 추가한 overflow: hidden 스타일 제거\r\n      document.body.style.overflow = '';\r\n      document.removeEventListener('mousedown', handleOutsideClose);\r\n      document.removeEventListener('keydown', handleKeyPress);\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <NotFound />;\r\n  }\r\n\r\n  return (\r\n    <EntireArea>\r\n      <Container>\r\n        <Wrapper $boxheight={boxHeight} ref={divRef}>\r\n          <FlexBox $justifyContent='center' style={{ height: '100%' }}>\r\n            <Close\r\n              onClick={() => {\r\n                handleClose();\r\n              }}\r\n            >\r\n              <IoMdClose />\r\n            </Close>\r\n\r\n            {isMobile ? (\r\n              <PostDetailContentsMobile\r\n                post={post}\r\n                commentListResponse={commentListResponse}\r\n                commentListLoading={commentListLoading}\r\n                postLoading={postLoading}\r\n                user={user}\r\n                isPostLike={isPostLike}\r\n                isBookmark={isBookmark}\r\n              />\r\n            ) : (\r\n              <PostDetailContentsPC\r\n                post={post}\r\n                user={user}\r\n                commentListResponse={commentListResponse}\r\n                commentListLoading={commentListLoading}\r\n                postLoading={postLoading}\r\n                fetchNext={fetchNext}\r\n                hasNextPage={hasNextPage}\r\n                isFetchingNextPage={isFetchingNextPage}\r\n                isPostLike={isPostLike}\r\n                isBookmark={isBookmark}\r\n              />\r\n            )}\r\n          </FlexBox>\r\n        </Wrapper>\r\n      </Container>\r\n    </EntireArea>\r\n  );\r\n};\r\n\r\nexport default PostDetailPage;\r\n","export const myPageKey = {\r\n  myPosts: 'myPosts',\r\n  myBookmark: 'myBookmark',\r\n};\r\n"],"names":["NotFoundContainer","styled","div","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","GoBack","_templateObject3","_ref","text","navigate","useNavigate","_jsx","children","_Fragment","_jsxs","className","onClick","goBack","postId","data","isLoading","error","useQuery","queryKey","postDetailKey","postBookmark","queryFn","async","instance","get","concat","fetchPostBookmark","refetchOnWindowFocus","staleTime","postLike","fetchPostLike","useEffect","toast","res","put","msg","setTimeout","window","location","reload","usePostBookmark","user","queryClient","useQueryClient","useMutation","mutationFn","mutationKey","onSuccess","invalidateQueries","post","refetchType","myPageKey","myBookmark","onError","_error$response","console","log","response","status","deletePost","delete","useDeletePost","postsKey","posts","StyledButton","Button","Kakao","cleanup","init","process","type","shareKakao","_post$author","_post$author2","Share","sendCustom","templateId","templateArgs","post_id","_id","avatar","author","nickname","postImg","images","contents","replace","like","postLikeCount","commentCount","postCommentCount","fadeInAnimation","keyframes","Container","Wrapper","_templateObject4","$last","_ref2","_ref3","$danger","SLink","Link","_templateObject5","_ref4","text2","handleConfirm","handleCancel","isConfirmModalOpen","setIsConfirmModalOpen","useState","useUser","mutate","handlePostDelete","useCallback","ConfirmModal","to","PostShare","postLikePost","usePostLikePost","ImageBox","Image","img","BtnWrap","swiperRef","setSwiperRef","prevHandler","slidePrev","GrFormPrevious","nextHandler","slideNext","GrFormNext","Swiper","spaceBetween","slidesPerView","modules","Navigation","Pagination","Scrollbar","A11y","pagination","clickable","onSwiper","swiper","map","index","SwiperSlide","src","alt","url","postLoading","length","Images","motion","handlePostLike","isPostLike","whileTap","scale","transition","duration","FcLike","style","fontSize","SlHeart","User","ContentsWrap","ul","ContentsItem","li","Post","Section","section","_templateObject6","Bottom","_templateObject7","Icon","_templateObject8","_post$author3","commentListResponse","commentListLoading","isBookmark","isVariousModalOpen","setIsVariousModalOpen","setCommentFormStatus","useSetRecoilState","commentFormStatus","updateLike","updateBookmark","VariousModal","PostHeader","CommentSkeleton","BsThreeDots","PostDetailImages","PostDetailLike","warning","IoChatbubbleOutline","handlePostBookmark","FaBookmark","CiBookmark","Intl","NumberFormat","format","FlexBox","dangerouslySetInnerHTML","__html","pages","totalCount","formatDistance","Date","date","locale","ko","UserImage","Footer","Box","_templateObject9","_templateObject10","Time","_templateObject11","skeletons","Array","fill","_post$author4","_commentListResponse$","fetchNext","hasNextPage","isFetchingNextPage","$direction","height","_","_data$commentList","commentList","comment","CommentList","$justifyContent","$alignItems","Typography","tag","minHeight","marginTop","cursor","LuPlusCircle","CommentForm","EntireArea","$boxheight","Close","PostDetailPage","params","useParams","useLocation","isMobile","setIsMobile","innerWidth","boxHeight","setBoxHeight","useFetchPostDetail","id","useFetchPostLike","useFetchPostBookmark","fetchNextPage","useFetchCommentList","divRef","useRef","isError","document","body","overflow","handleKeyPress","e","keyCode","handleOutsideClose","current","contains","target","handleResize","addEventListener","removeEventListener","NotFound","ref","key","IoMdClose","PostDetailContentsMobile","PostDetailContentsPC","myPosts"],"sourceRoot":""}