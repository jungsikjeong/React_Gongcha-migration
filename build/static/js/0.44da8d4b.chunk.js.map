{"version":3,"file":"static/js/0.44da8d4b.chunk.js","mappings":"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","sources":["api/file-upload.ts","components/common/flex-box.tsx","components/common/image-cropper.tsx","components/common/typography.tsx","components/uitls/data-url-to-file.ts","hook/use-image-compress.tsx","pages/profile-edit/hook/use-post-edit-profile.tsx","pages/profile-edit/index.tsx"],"sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { getToken } from 'utils/token.localstorage';\r\n\r\nexport const deleteFile = async ({ images }: { images: string[] }) => {\r\n  try {\r\n    const token = getToken();\r\n\r\n    const res = await axios.put<string[]>(\r\n      '/api/posts/upload',\r\n      { images },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.log(error);\r\n\r\n    if (error?.response?.status === 401) {\r\n      toast.error('파일 삭제 중 에러가 발생했습니다. 다시 시도해주세요');\r\n      window.location.reload();\r\n    }\r\n  }\r\n};\r\n\r\nexport const postFileUpload = async ({ formData }: { formData: FormData }) => {\r\n  try {\r\n    const token = getToken();\r\n\r\n    const res = await axios.post<string[]>('/api/posts/upload', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    return res.data;\r\n  } catch (error: any) {\r\n    if (error?.response?.status === 401) {\r\n      toast.error('업로드중 에러가 발생했습니다. 다시 시도해주세요');\r\n      window.location.reload();\r\n    }\r\n  }\r\n};\r\n\r\nexport const profileFileUpload = async ({\r\n  formData,\r\n}: {\r\n  formData: FormData;\r\n}): Promise<string> => {\r\n  try {\r\n    const token = getToken();\r\n\r\n    const res = await axios.post<string>('/api/users/edit/avatar', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    return res.data;\r\n  } catch (error: any) {\r\n    if (error?.response?.status === 401) {\r\n      toast.error('업로드중 에러가 발생했습니다. 다시 시도해주세요');\r\n      window.location.reload();\r\n    }\r\n    return '';\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\ninterface IFlexBox {\r\n  children: React.ReactNode;\r\n  style?: React.CSSProperties;\r\n  $direction?: string;\r\n  $justifyContent?: string;\r\n  $alignItems?: string;\r\n  $wrap?: string;\r\n  $gap?: string;\r\n  $padding?: string;\r\n  $background?: string;\r\n}\r\n\r\nconst Container = styled.div<IFlexBox>`\r\n  display: flex;\r\n  flex-direction: ${({ $direction }) => $direction || 'row'};\r\n  justify-content: ${({ $justifyContent }) => $justifyContent || 'flex-start'};\r\n  align-items: ${({ $alignItems }) => $alignItems || 'stretch'};\r\n  flex-wrap: ${({ $wrap }) => $wrap || 'nowrap'};\r\n  gap: ${({ $gap }) => $gap || '0'};\r\n  padding: ${({ $padding }) => $padding};\r\n  background: ${({ $background }) => $background || 'transparent'};\r\n`;\r\n\r\nconst FlexBox = ({\r\n  children,\r\n  $direction,\r\n  $justifyContent,\r\n  $alignItems,\r\n  $wrap,\r\n  $gap,\r\n  $padding,\r\n  $background,\r\n  style,\r\n}: IFlexBox) => {\r\n  return (\r\n    <Container\r\n      $direction={$direction}\r\n      $justifyContent={$justifyContent}\r\n      $alignItems={$alignItems}\r\n      $wrap={$wrap}\r\n      $gap={$gap}\r\n      $padding={$padding}\r\n      $background={$background}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FlexBox;\r\n","import 'cropperjs/dist/cropper.css';\r\nimport { useRef, useState } from 'react';\r\nimport { Cropper, ReactCropperElement } from 'react-cropper';\r\nimport { toast } from 'react-toastify';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Container = styled.div<{ profileimg: string }>`\r\n  z-index: 20;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .cropper-crop-box,\r\n  .cropper-view-box {\r\n    ${({ profileimg }) =>\r\n      profileimg &&\r\n      css`\r\n        border-radius: 50%;\r\n      `}\r\n  }\r\n\r\n  .cropper-view-box {\r\n    ${({ profileimg }) =>\r\n      profileimg &&\r\n      css`\r\n        box-shadow: 0 0 0 1px #39f;\r\n        outline: 0;\r\n      `}\r\n  }\r\n`;\r\nconst BackDrop = styled.div`\r\n  position: inherit;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  backdrop-filter: blur(8px);\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  z-index: 2;\r\n  background: #ffffff;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  .title {\r\n    font-weight: 600;\r\n    line-height: 26px;\r\n    padding: 20px 16px;\r\n    text-align: center;\r\n    color: black;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #ffffff;\r\n`;\r\nconst Content = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: white;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  padding: 20px 16px;\r\n  background: #ffffff;\r\n  column-gap: 12px;\r\n\r\n  button {\r\n    width: 100px;\r\n    height: 40px;\r\n    border: 1px solid #c3c3c3;\r\n    border-radius: 4px;\r\n    background: white;\r\n  }\r\n\r\n  .crop {\r\n    background: #cf3e58;\r\n    color: white;\r\n    border: none;\r\n  }\r\n`;\r\n\r\ninterface IImageCropperProps {\r\n  onCrop: (image: string) => void;\r\n  aspectRatio?: number;\r\n  profileImg?: boolean;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ImageCropper = ({\r\n  children,\r\n  aspectRatio,\r\n  onCrop,\r\n  profileImg = false,\r\n}: IImageCropperProps) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const cropperRef = useRef<ReactCropperElement>(null);\r\n  const [image, setImage] = useState<null | string>(null);\r\n\r\n  const handleChildrenClick = () => {\r\n    if (inputRef.current) inputRef.current.click();\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n\r\n    const files = e.target.files;\r\n\r\n    if (!files || files.length === 0) return;\r\n    if (!files[0].type.startsWith('image/')) {\r\n      toast.warning('이 파일은 이미지가 아닙니다.');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setImage(reader.result as string);\r\n    };\r\n    reader.readAsDataURL(files[0]);\r\n  };\r\n\r\n  const getCropData = () => {\r\n    if (typeof cropperRef.current?.cropper !== 'undefined') {\r\n      const dataURL = cropperRef.current.cropper.getCroppedCanvas().toDataURL();\r\n\r\n      onCrop(dataURL);\r\n      setImage(null);\r\n    }\r\n  };\r\n\r\n  const handleClick = (\r\n    event: React.MouseEvent<HTMLInputElement, MouseEvent>\r\n  ) => {\r\n    (event.target as HTMLInputElement).value = '';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='file'\r\n        ref={inputRef}\r\n        multiple\r\n        style={{ display: 'none' }}\r\n        onChange={handleFileChange}\r\n        onClick={(e) => handleClick(e)}\r\n      />\r\n      <span onClick={handleChildrenClick}>{children}</span>\r\n      {image && (\r\n        <Container profileimg={profileImg === true ? 'true' : ''}>\r\n          <BackDrop />\r\n          <Wrapper>\r\n            <h3 className='title'>이미지 편집하기</h3>\r\n            <ContentWrapper>\r\n              <Content>\r\n                <Cropper\r\n                  ref={cropperRef}\r\n                  aspectRatio={aspectRatio && aspectRatio}\r\n                  initialAspectRatio={1}\r\n                  src={image}\r\n                  viewMode={1}\r\n                  width={800}\r\n                  height={500}\r\n                  background={false}\r\n                  responsive\r\n                  autoCropArea={1}\r\n                  checkOrientation={false}\r\n                  guides\r\n                />\r\n              </Content>\r\n            </ContentWrapper>\r\n            <Footer>\r\n              <button onClick={() => setImage(null)}>취소</button>\r\n              <button className='crop' onClick={getCropData}>\r\n                적용하기\r\n              </button>\r\n            </Footer>\r\n          </Wrapper>\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageCropper;\r\n","import { CSSProperties, ReactNode, createElement } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype TagVariants = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span';\r\n\r\ninterface ITypographyProps {\r\n  tag: TagVariants;\r\n  children: ReactNode;\r\n  style?: CSSProperties;\r\n}\r\n\r\nconst DynamicTypography = styled(\r\n  ({ tag, children, ...props }: ITypographyProps) =>\r\n    createElement(tag, props, children)\r\n)`\r\n  color: rgb(245, 245, 245);\r\n`;\r\n\r\nconst Typography = ({\r\n  tag = 'p',\r\n  children,\r\n  ...props\r\n}: ITypographyProps & CSSProperties) => (\r\n  <DynamicTypography tag={tag} style={{ ...props }}>\r\n    {children}\r\n  </DynamicTypography>\r\n);\r\n\r\nexport default Typography;\r\n","export const dataURItoFile = (dataURI: string) => {\r\n  const byteString = atob(dataURI.split(',')[1]);\r\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n  const ab = new ArrayBuffer(byteString.length);\r\n  const ia = new Uint8Array(ab);\r\n  for (let i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n  const blob = new Blob([ab], { type: mimeString });\r\n  return new File([blob], 'uploadImage', { type: mimeString });\r\n};\r\n","import imageCompression from 'browser-image-compression';\r\nimport { useState } from 'react';\r\n\r\nconst useImageCompress = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const compressImage = async (imageFile: File) => {\r\n    if (isLoading) return;\r\n\r\n    setIsLoading(true);\r\n    console.log(`원본 이미지 사이즈 : ${imageFile.size / 1024 / 1024} MB`);\r\n\r\n    const options = {\r\n      maxSizeMB: 2,\r\n      maxWidthOrHeight: 1920,\r\n    };\r\n\r\n    try {\r\n      const compressedFile = await imageCompression(imageFile, options);\r\n\r\n      console.log(\r\n        `압축된 이미지 사이즈 : ${compressedFile.size / 1024 / 1024} MB`\r\n      );\r\n\r\n      setIsLoading(false);\r\n\r\n      return compressedFile;\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return { compressImage, isLoading };\r\n};\r\n\r\nexport default useImageCompress;\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport instance from 'api/instance';\r\nimport { userKey } from 'react-query-key/auth.keys';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface IBodyProps {\r\n  avatar?: string;\r\n  password?: string;\r\n  nickname?: string;\r\n}\r\n\r\ninterface ICustomResponse<T, U> {\r\n  data: T;\r\n  msg?: U;\r\n}\r\nconst postUserEdit = async (body: IBodyProps) => {\r\n  const res: ICustomResponse<string, any> = await instance.post(\r\n    `/api/users/edit/profile`,\r\n    body\r\n  );\r\n\r\n  if (res.msg === '리프레시 토큰 만료됨') {\r\n    toast.error('로그인 기한이 만료되었습니다. 다시 로그인 해주세요!');\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1200);\r\n  }\r\n\r\n  return res.data;\r\n};\r\n\r\n// 게시글 좋아요 뮤테이션\r\nconst usePostEditProfile = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: postUserEdit,\r\n    mutationKey: ['user-edit'],\r\n\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({\r\n        queryKey: [userKey.user],\r\n        refetchType: 'all',\r\n      });\r\n\r\n      // window.location.reload();\r\n      toast.success('프로필이 업데이트 되었습니다.');\r\n    },\r\n    onError: (error: any) => {\r\n      console.log('error:', error);\r\n      toast.error('다시 시도해주세요');\r\n      if (error?.response?.status === 401) {\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 500);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default usePostEditProfile;\r\n","import { useEffect, useState } from 'react';\r\nimport { SubmitHandler, useForm } from 'react-hook-form';\r\nimport { IoIosArrowBack } from 'react-icons/io';\r\nimport { LuPlus } from 'react-icons/lu';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport uuid from 'react-uuid';\r\nimport styled from 'styled-components';\r\n\r\nimport { profileFileUpload } from 'api/file-upload';\r\nimport { dataURItoFile } from 'components/uitls/data-url-to-file';\r\nimport { useUser } from 'hook/auth/use-user';\r\nimport useImageCompress from 'hook/use-image-compress';\r\nimport { IEditMyProfile } from 'interface/auth';\r\nimport {\r\n  introductionValidation,\r\n  nicknameEditValidation,\r\n  password2EditValidation,\r\n  passwordEditValidation,\r\n} from 'utils/validation';\r\nimport usePostEditProfile from './hook/use-post-edit-profile';\r\n\r\nimport Button from 'components/common/button';\r\nimport ErrorText from 'components/common/error-text';\r\nimport FlexBox from 'components/common/flex-box';\r\nimport ImageCropper from 'components/common/image-cropper';\r\nimport Typography from 'components/common/typography';\r\n\r\nconst Container = styled.div`\r\n  padding-top: 1rem;\r\n  height: 100vh;\r\n  background-color: black;\r\n  color: rgb(245, 245, 245);\r\n\r\n  .inside {\r\n    position: absolute;\r\n    right: 1rem;\r\n    bottom: 1rem;\r\n  }\r\n\r\n  .edit-icon-img {\r\n    position: absolute;\r\n    top: 5px;\r\n    left: 3rem;\r\n    filter: drop-shadow(-1px -3px 10px rgb(245, 245, 245));\r\n  }\r\n  .edit-icon-close-box {\r\n    position: relative;\r\n\r\n    .edit-icon-close {\r\n      position: absolute;\r\n      top: -10px;\r\n      right: -10px;\r\n      filter: drop-shadow(-1px -3px 10px rgb(245, 245, 245));\r\n      font-weight: 600;\r\n    }\r\n  }\r\n`;\r\nconst Wrapper = styled.div`\r\n  max-width: 1024px;\r\n  padding: 1rem;\r\n  margin: 0 auto;\r\n  color: rgb(245, 245, 245);\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nconst Box = styled.div`\r\n  position: relative;\r\n  margin: 1rem 0;\r\n  border-radius: 20px;\r\n  background-color: rgb(38, 38, 38);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst EditIcon = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgb(38, 38, 38);\r\n  border-radius: 50%;\r\n  width: 25px;\r\n  height: 25px;\r\n  font-size: 14px;\r\n  transition: all 0.2s ease;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: rgb(48, 48, 48);\r\n  }\r\n`;\r\n\r\nconst UserImage = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  flex-shrink: 0;\r\n  margin-right: 10px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Form = styled.form``;\r\n\r\nconst Input = styled.input<{\r\n  $iserror: string;\r\n}>`\r\n  border: none;\r\n  outline: 0;\r\n  padding: 8px;\r\n  font-size: 15px;\r\n  transition: all 0.2s ease;\r\n  border-radius: 8px;\r\n  box-shadow: ${({ $iserror }) => ($iserror ? ' 0 0 10px tomato' : '')};\r\n  background-color: transparent;\r\n  border: 1px solid rgb(50, 53, 57);\r\n  color: rgb(245, 245, 245);\r\n\r\n  &:focus + .limit-text {\r\n    opacity: 1;\r\n  }\r\n\r\n  &:focus {\r\n    opacity: 1;\r\n    border: 1px solid rgb(248, 249, 249);\r\n  }\r\n  &:focus::placeholder {\r\n    color: rgb(245, 245, 245);\r\n  }\r\n`;\r\n\r\nconst InputNickname = styled.input<{\r\n  $iserror: string;\r\n}>`\r\n  border: none;\r\n  outline: 0;\r\n  padding: 8px;\r\n  font-size: 15px;\r\n  transition: all 0.2s ease;\r\n  box-shadow: ${({ $iserror }) => ($iserror ? ' 0 0 10px tomato' : '')};\r\n  background-color: transparent;\r\n  border-bottom: 1px solid rgb(120 120 120);\r\n  color: rgb(245, 245, 245);\r\n\r\n  &::placeholder {\r\n    color: rgb(245, 245, 245);\r\n  }\r\n\r\n  &:focus + .limit-text {\r\n    opacity: 1;\r\n  }\r\n\r\n  &:focus {\r\n    opacity: 1;\r\n    border-bottom: 1px solid rgb(248, 249, 249);\r\n  }\r\n`;\r\nconst TextArea = styled.textarea<{ $iserror: string }>`\r\n  border: none;\r\n  outline: 0;\r\n  width: 100%;\r\n  padding: 9.5px 80px 2rem 15px;\r\n  resize: none;\r\n  font-size: 15px;\r\n  border-radius: 12px;\r\n  box-shadow: ${({ $iserror }) => ($iserror ? ' 0 0 10px tomato' : '')};\r\n  border: 1px solid rgb(50, 53, 57);\r\n  background-color: transparent;\r\n  color: rgb(245, 245, 245);\r\n\r\n  &::placeholder {\r\n    opacity: 0.5;\r\n    color: rgb(245, 245, 245);\r\n  }\r\n\r\n  &:focus {\r\n    opacity: 1;\r\n    border: 1px solid rgb(248, 249, 249);\r\n  }\r\n\r\n  &:focus::placeholder {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst LimitText = styled.span<{ $islimit: string; opacity: string }>`\r\n  opacity: ${({ opacity }) => opacity};\r\n  color: ${({ $islimit }) => ($islimit ? 'rgb(237, 73, 86)' : 'white')};\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst SButton = styled(Button)<{ disabled: boolean }>`\r\n  width: inherit;\r\n  background-color: rgb(0, 149, 246);\r\n  font-weight: 600;\r\n  padding: 16px 20px;\r\n  width: 253px;\r\n  margin-top: 2rem;\r\n  margin-left: auto;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  opacity: ${(props) => (props.disabled ? '0.5' : '1')};\r\n  cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\r\n`;\r\n\r\nconst ProfileEditPage = () => {\r\n  const navigate = useNavigate();\r\n  const { user } = useUser();\r\n\r\n  const [uuId, setUuId] = useState<string>('');\r\n  const [uploadImage, setUploadImage] = useState<string | null>(null);\r\n  const [compressedImage, setCompressedImage] = useState<Blob | null>();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<IEditMyProfile>();\r\n\r\n  const nickname = watch('nickname');\r\n  const introduction = watch('introduction');\r\n  const password = watch('password');\r\n\r\n  const { mutate, isPending } = usePostEditProfile();\r\n\r\n  const onSubmit: SubmitHandler<IEditMyProfile> = async (\r\n    data: IEditMyProfile\r\n  ) => {\r\n    let imgAddress: string = '';\r\n\r\n    if (compressedImage) {\r\n      const formData = new FormData();\r\n\r\n      formData.append('file', compressedImage);\r\n\r\n      imgAddress = await profileFileUpload({ formData });\r\n    }\r\n\r\n    if (imgAddress || nickname || introduction || password || data?.password2) {\r\n      const body = {\r\n        nickname,\r\n        introduction,\r\n        password,\r\n        password2: data?.password2,\r\n        avatar: imgAddress,\r\n      };\r\n\r\n      await mutate(body);\r\n\r\n      setUploadImage(null);\r\n      setCompressedImage(null);\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const { isLoading: isCompressLoading, compressImage } = useImageCompress();\r\n\r\n  const handleUploadImage = (image: string) => {\r\n    setUuId(uuid());\r\n    setUploadImage(image);\r\n  };\r\n\r\n  const handleCompressImage = async () => {\r\n    if (!uploadImage) return;\r\n\r\n    const imageFile = dataURItoFile(uploadImage);\r\n    // Blob객체를 리턴함\r\n    const compressedImage = await compressImage(imageFile);\r\n    setCompressedImage(compressedImage);\r\n\r\n    // 이미지 서버 저장 로직\r\n    if (!compressedImage) return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (uploadImage) {\r\n      handleCompressImage();\r\n    }\r\n  }, [uploadImage, uuid]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <FlexBox $alignItems='center'>\r\n          <IoIosArrowBack\r\n            size={30}\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={() => navigate(-1)}\r\n          />\r\n\r\n          <Typography tag='h3' padding='1rem 0'>\r\n            프로필 편집\r\n          </Typography>\r\n        </FlexBox>\r\n\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Box>\r\n            <ImageCropper\r\n              profileImg={true}\r\n              onCrop={handleUploadImage}\r\n              aspectRatio={1 / 1}\r\n            >\r\n              <EditIcon className='edit-icon-img'>\r\n                <LuPlus />\r\n              </EditIcon>\r\n\r\n              <UserImage\r\n                src={uploadImage ? uploadImage : user?.avatar}\r\n                alt=''\r\n              />\r\n            </ImageCropper>\r\n\r\n            <InputNickname\r\n              autoComplete='on'\r\n              {...register('nickname', nicknameEditValidation)}\r\n              placeholder={user?.nickname}\r\n              $iserror={errors?.nickname ? 'true' : ''}\r\n            />\r\n            <LimitText\r\n              opacity='0'\r\n              $islimit={nickname && nickname.length > 6 ? 'true' : ''}\r\n              className='limit-text'\r\n            >\r\n              {nickname !== undefined &&\r\n                nickname.length !== 0 &&\r\n                nickname.length}\r\n            </LimitText>\r\n          </Box>\r\n\r\n          <Grid>\r\n            <div>\r\n              <Typography tag='h4' padding='1rem 0'>\r\n                소개\r\n              </Typography>\r\n\r\n              <div className='relative'>\r\n                <TextArea\r\n                  wrap='hard'\r\n                  autoComplete='on'\r\n                  {...register('introduction', introductionValidation)}\r\n                  placeholder={user?.introduction ? user?.introduction : '소개'}\r\n                  $iserror={\r\n                    errors?.introduction ||\r\n                    (introduction?.length as number) > 150\r\n                      ? 'true'\r\n                      : ''\r\n                  }\r\n                />\r\n\r\n                <div className='inside'>\r\n                  <LimitText\r\n                    opacity='1'\r\n                    $islimit={\r\n                      introduction && introduction.length > 150 ? 'true' : ''\r\n                    }\r\n                    className='limit-text'\r\n                  >\r\n                    {introduction !== undefined &&\r\n                    introduction.length !== 0 &&\r\n                    introduction.length\r\n                      ? introduction.length\r\n                      : '0'}\r\n                    / 150\r\n                  </LimitText>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Typography tag='h4' padding='1rem 0'>\r\n                비밀번호 변경\r\n              </Typography>\r\n\r\n              <FlexBox $direction='column' $gap='10px'>\r\n                <Input\r\n                  autoComplete='on'\r\n                  type='password'\r\n                  placeholder='비밀번호'\r\n                  $iserror={errors?.password ? 'true' : ''}\r\n                  {...register('password', passwordEditValidation)}\r\n                />\r\n\r\n                <Input\r\n                  autoComplete='on'\r\n                  type='password'\r\n                  placeholder='비밀번호 확인'\r\n                  className='input-last'\r\n                  $iserror={errors?.password2 ? 'true' : ''}\r\n                  {...register(\r\n                    'password2',\r\n                    password2EditValidation(password as string)\r\n                  )}\r\n                />\r\n              </FlexBox>\r\n            </div>\r\n          </Grid>\r\n\r\n          {Object.values(errors).length !== 0 && (\r\n            <ErrorText text={Object.values(errors)[0]?.message} />\r\n          )}\r\n\r\n          <FlexBox>\r\n            <SButton\r\n              type='submit'\r\n              disabled={\r\n                isCompressLoading ||\r\n                Object.keys(errors).length !== 0 ||\r\n                !(nickname || introduction || password || compressedImage)\r\n                  ? true\r\n                  : false\r\n              }\r\n            >\r\n              {isCompressLoading || isPending ? (\r\n                <img src='/spinner.svg' alt='loading' className='spinner' />\r\n              ) : (\r\n                '제출'\r\n              )}\r\n            </SButton>\r\n          </FlexBox>\r\n        </Form>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ProfileEditPage;\r\n"],"names":["deleteFile","async","images","_ref","token","getToken","axios","put","headers","Authorization","concat","data","error","_error$response","console","log","response","status","toast","window","location","reload","postFileUpload","formData","_ref2","post","_error$response2","profileFileUpload","_ref3","_error$response3","Container","styled","div","_templateObject","_taggedTemplateLiteral","$direction","$justifyContent","$alignItems","_ref4","$wrap","_ref5","$gap","_ref6","$padding","_ref7","$background","_ref8","children","style","_jsx","profileimg","css","_templateObject2","_templateObject3","BackDrop","_templateObject4","Wrapper","_templateObject5","ContentWrapper","_templateObject6","Content","_templateObject7","Footer","_templateObject8","aspectRatio","onCrop","profileImg","inputRef","useRef","cropperRef","image","setImage","useState","_jsxs","_Fragment","type","ref","multiple","display","onChange","e","preventDefault","files","target","length","startsWith","warning","reader","FileReader","onload","result","readAsDataURL","onClick","value","handleChildrenClick","current","click","className","Cropper","initialAspectRatio","src","viewMode","width","height","background","responsive","autoCropArea","checkOrientation","guides","getCropData","_cropperRef$current","cropper","dataURL","getCroppedCanvas","toDataURL","DynamicTypography","tag","props","createElement","dataURItoFile","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","blob","Blob","File","useImageCompress","isLoading","setIsLoading","compressImage","imageFile","size","options","maxSizeMB","maxWidthOrHeight","compressedFile","imageCompression","postUserEdit","res","instance","body","msg","setTimeout","usePostEditProfile","queryClient","useQueryClient","useMutation","mutationFn","mutationKey","onSuccess","invalidateQueries","queryKey","userKey","user","refetchType","success","onError","Grid","Box","EditIcon","UserImage","img","Form","form","Input","input","$iserror","InputNickname","_templateObject9","TextArea","textarea","_templateObject10","LimitText","span","_templateObject11","opacity","$islimit","SButton","Button","_templateObject12","disabled","ProfileEditPage","_Object$values$","navigate","useNavigate","useUser","uuId","setUuId","uploadImage","setUploadImage","compressedImage","setCompressedImage","register","handleSubmit","watch","formState","errors","reset","useForm","nickname","introduction","password","mutate","isPending","isCompressLoading","useEffect","handleCompressImage","uuid","FlexBox","IoIosArrowBack","cursor","Typography","padding","onSubmit","imgAddress","FormData","append","password2","avatar","ImageCropper","LuPlus","alt","autoComplete","nicknameEditValidation","placeholder","undefined","wrap","introductionValidation","passwordEditValidation","password2EditValidation","Object","values","ErrorText","text","message","keys"],"sourceRoot":""}